--------------iter_globals------------------
Value: @DR0 = external global i64, align 8
  name DR0
  Global variable-value 
  type i64*
  Pointer to :  Integer-type 
Value: @DR1 = external global i64, align 8
  name DR1
  Global variable-value 
  type i64*
  Pointer to :  Integer-type 
Value: @DR2 = external global i64, align 8
  name DR2
  Global variable-value 
  type i64*
  Pointer to :  Integer-type 
Value: @DR3 = external global i64, align 8
  name DR3
  Global variable-value 
  type i64*
  Pointer to :  Integer-type 
Value: @DR4 = external global i64, align 8
  name DR4
  Global variable-value 
  type i64*
  Pointer to :  Integer-type 
Value: @DR5 = external global i64, align 8
  name DR5
  Global variable-value 
  type i64*
  Pointer to :  Integer-type 
Value: @DR6 = external global i64, align 8
  name DR6
  Global variable-value 
  type i64*
  Pointer to :  Integer-type 
Value: @DR7 = external global i64, align 8
  name DR7
  Global variable-value 
  type i64*
  Pointer to :  Integer-type 
Value: @gCR0 = external global %union.anon, align 1
  name gCR0
  Global variable-value 
  type %union.anon*
  Pointer to :  Stuct-type 
Value: @gCR1 = external global %union.anon, align 1
  name gCR1
  Global variable-value 
  type %union.anon*
  Pointer to :  Stuct-type 
Value: @gCR2 = external global %union.anon, align 1
  name gCR2
  Global variable-value 
  type %union.anon*
  Pointer to :  Stuct-type 
Value: @gCR3 = external global %union.anon, align 1
  name gCR3
  Global variable-value 
  type %union.anon*
  Pointer to :  Stuct-type 
Value: @gCR4 = external global %union.anon, align 1
  name gCR4
  Global variable-value 
  type %union.anon*
  Pointer to :  Stuct-type 
Value: @gCR8 = external global %union.anon, align 1
  name gCR8
  Global variable-value 
  type %union.anon*
  Pointer to :  Stuct-type 
Value: @seg_600e50__init_array = internal global %seg_600e50__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004a0___do_global_dtors_aux to i64) }>
  name seg_600e50__init_array
  Global variable-value 
  type %seg_600e50__init_array_type*
  Pointer to :  Stuct-type 
Value: @seg_600ff0__got = internal global %seg_600ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
  name seg_600ff0__got
  Global variable-value 
  type %seg_600ff0__got_type*
  Pointer to :  Stuct-type 
Value: @__bss_start = global %__bss_start_type zeroinitializer
  name __bss_start
  Global variable-value 
  type %__bss_start_type*
  Pointer to :  Stuct-type 
Value: @0 = internal global i1 false
  name 
  Global variable-value 
  type i1*
  Pointer to :  Integer-type 
Value: @1 = internal constant void ()* @__mcsema_attach_call
  name 
  Global variable-value 
  type void ()**
  Pointer to :  Pointer to :  Function-type 
Value: @2 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0_frame_dummy_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004a0___do_global_dtors_aux_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400600___libc_csu_fini_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400590___libc_csu_init_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @log_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @recv_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @check_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @constructReply_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @C2_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @send_wrapper
  name 
  Global variable-value 
  type %struct.Memory* (%struct.State*, i64, %struct.Memory*)**
  Pointer to :  Pointer to :  Function-type 
Value: @llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
  name llvm.global_dtors
  Global variable-value 
  type [1 x { i32, void ()*, i8* }]*
  Pointer to :  Array-type 
Value: @llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
  name llvm.global_ctors
  Global variable-value 
  type [1 x { i32, void ()*, i8* }]*
  Pointer to :  Array-type 
function name : llvm.ctpop.i32 
function name : __remill_error 
function name : __remill_function_call 
function name : __gmon_start__ 
function name : __libc_start_main 
function name : sub_4004f3_check 
function name : sub_4004e0_send 
function name : sub_4004d7_recv 
function name : sub_4003d8__init_proc 
function name : sub_400600___libc_csu_fini 
function name : sub_4004d0_frame_dummy 
function name : sub_4003f0__start 
function name : sub_400604__term_proc 
function name : sub_400509_C2 
function name : sub_4004ea_constructReply 
function name : sub_400460_register_tm_clones 
function name : sub_400420__dl_relocate_static_pie 
function name : sub_400590___libc_csu_init 
function name : sub_400430_deregister_tm_clones 
function name : sub_4004ff_log 
function name : sub_40056f_main 
function name : sub_4004a0___do_global_dtors_aux 
function name : __mcsema_attach_call 
function name : callback_sub_4004d0_frame_dummy 
function name : callback_sub_4004d0_frame_dummy_wrapper 
function name : callback_sub_4004a0___do_global_dtors_aux 
function name : callback_sub_4004a0___do_global_dtors_aux_wrapper 
function name : callback_sub_400600___libc_csu_fini 
function name : callback_sub_400600___libc_csu_fini_wrapper 
function name : callback_sub_400590___libc_csu_init 
function name : callback_sub_400590___libc_csu_init_wrapper 
function name : main 
function name : main_wrapper 
function name : ext_601038___libc_start_main 
function name : log 
function name : log_wrapper 
function name : .init_proc 
function name : .init_proc_wrapper 
function name : recv 
function name : recv_wrapper 
function name : .term_proc 
function name : .term_proc_wrapper 
function name : check 
function name : check_wrapper 
function name : constructReply 
function name : constructReply_wrapper 
function name : C2 
function name : C2_wrapper 
function name : send 
function name : send_wrapper 
function name : __mcsema_destructor 
function name : __mcsema_constructor 
Functions reachable  count: 10
function name mapping size: 10
instruction: 
 @DR0 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR1 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR2 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR3 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR4 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR5 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR6 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR7 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @gCR0 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR1 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR2 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR3 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR4 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR8 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600e50__init_array = internal global %seg_600e50__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004a0___do_global_dtors_aux to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600ff0__got = internal global %seg_600ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @__bss_start = global %__bss_start_type zeroinitializer 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @0 = internal global i1 false 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @1 = internal constant void ()* @__mcsema_attach_call 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @2 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0_frame_dummy_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004a0___do_global_dtors_aux_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400600___libc_csu_fini_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400590___libc_csu_init_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @log_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @recv_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @check_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @constructReply_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @C2_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @send_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @DR0 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR1 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR2 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR3 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR4 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR5 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR6 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR7 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @gCR0 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR1 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR2 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR3 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR4 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR8 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600e50__init_array = internal global %seg_600e50__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004a0___do_global_dtors_aux to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600ff0__got = internal global %seg_600ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @__bss_start = global %__bss_start_type zeroinitializer 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @0 = internal global i1 false 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @1 = internal constant void ()* @__mcsema_attach_call 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @2 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0_frame_dummy_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004a0___do_global_dtors_aux_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400600___libc_csu_fini_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400590___libc_csu_init_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @log_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @recv_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @check_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @constructReply_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @C2_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @send_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @DR0 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR1 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR2 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR3 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR4 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR5 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR6 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR7 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @gCR0 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR1 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR2 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR3 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR4 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR8 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600e50__init_array = internal global %seg_600e50__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004a0___do_global_dtors_aux to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600ff0__got = internal global %seg_600ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @__bss_start = global %__bss_start_type zeroinitializer 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @0 = internal global i1 false 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @1 = internal constant void ()* @__mcsema_attach_call 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @2 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0_frame_dummy_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004a0___do_global_dtors_aux_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400600___libc_csu_fini_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400590___libc_csu_init_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @log_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @recv_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @check_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @constructReply_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @C2_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @send_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @DR0 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR1 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR2 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR3 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR4 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR5 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR6 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR7 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @gCR0 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR1 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR2 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR3 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR4 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR8 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600e50__init_array = internal global %seg_600e50__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004a0___do_global_dtors_aux to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600ff0__got = internal global %seg_600ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @__bss_start = global %__bss_start_type zeroinitializer 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @0 = internal global i1 false 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @1 = internal constant void ()* @__mcsema_attach_call 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @2 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0_frame_dummy_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004a0___do_global_dtors_aux_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400600___libc_csu_fini_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400590___libc_csu_init_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @log_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @recv_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @check_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @constructReply_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @C2_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @send_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
look for the first block of the function: sub_4004d7_recv
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 33 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N32 ) - (int* V_138 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_137+0) -> (GeneralNode N33 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 1 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N33 ) - (int* V_139 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_137+0) -> (GeneralNode N34 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 13 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N34 ) - (int* V_140 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_137+0) -> (GeneralNode N35 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 15 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N35 ) - (int* V_141 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_137+0) -> (GeneralNode N36 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %7 = alloca i32, align 4 
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
-------operand value kind and type kind------- 
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N36 ) - (int* V_142) -> (GeneralNode N37 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %8 = load i64, i64* %6, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N37 ) - (int V_143 = V_141) -> (GeneralNode N38 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %9 = load i64, i64* %5, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N38 ) - (int V_144 = V_140) -> (GeneralNode N39 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %10 = add i64 %9, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %9 = load i64, i64* %5, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %9 = load i64, i64* %5, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N39 ) - (int V_145 = V_144+-8) -> (GeneralNode N40 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %11 = inttoptr i64 %10 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %10 = add i64 %9, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N40 ) - (int* V_146 = (int*)V_145) -> (GeneralNode N41 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %8, i64* %11
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %12 = ptrtoint i32* %7 to i64
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %7 = alloca i32, align 4
  Instruction-value 
  Pointer to :  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N42 ) - (int V_147 = (int)V_142) -> (GeneralNode N43 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %13 = load i32, i32* %7
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N43 ) - (int V_148 = V_142) -> (GeneralNode N44 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %14 = zext i32 %13 to i64 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N44 ) - (int V_149) -> (GeneralNode N45 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %14, i64* %4, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %15 = inttoptr i64 %10 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %10 = add i64 %9, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N46 ) - (int* V_150 = (int*)V_145) -> (GeneralNode N47 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %16 = load i64, i64* %15
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N47 ) - (int V_151 = V_150) -> (GeneralNode N48 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %16, i64* %6, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %17 = inttoptr i64 %9 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %9 = load i64, i64* %5, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N49 ) - (int* V_152 = (int*)V_144) -> (GeneralNode N50 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %18 = load i64, i64* %17
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N50 ) - (int V_153 = V_152) -> (GeneralNode N51 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %18, i64* %3, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %19 = add i64 %9, 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %9 = load i64, i64* %5, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %9 = load i64, i64* %5, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N52 ) - (int V_154 = V_144+8) -> (GeneralNode N53 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %19, i64* %5, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
------------return-ins -------------
Terminator instruction:   ret %struct.Memory* %2
number of operands: 1 
instr: 
Instruction:   ret %struct.Memory* %2
number of operands: 1 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 instruction: 
 @DR0 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR1 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR2 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR3 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR4 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR5 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR6 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR7 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @gCR0 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR1 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR2 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR3 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR4 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR8 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600e50__init_array = internal global %seg_600e50__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004a0___do_global_dtors_aux to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600ff0__got = internal global %seg_600ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @__bss_start = global %__bss_start_type zeroinitializer 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @0 = internal global i1 false 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @1 = internal constant void ()* @__mcsema_attach_call 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @2 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0_frame_dummy_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004a0___do_global_dtors_aux_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400600___libc_csu_fini_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400590___libc_csu_init_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @log_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @recv_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @check_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @constructReply_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @C2_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @send_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
look for the first block of the function: sub_4004e0_send
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 33 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N56 ) - (int* V_191 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_190+0) -> (GeneralNode N57 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
number of operands: 5 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 11 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N57 ) - (struct union.anon{
int i64;
} union.anon* V_192 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_190+0) -> (GeneralNode N58 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %5 = bitcast %union.anon* %4 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  Instruction-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  Argument-value 
  Void-type 
  Instruction-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N58 ) - (int* V_193 = (int*)V_192) -> (GeneralNode N59 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 13 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N59 ) - (int* V_194 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_190+0) -> (GeneralNode N60 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 15 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N60 ) - (int* V_195 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_190+0) -> (GeneralNode N61 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %8 = alloca i32, align 4 
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
-------operand value kind and type kind------- 
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N61 ) - (int* V_196) -> (GeneralNode N62 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %9 = load i64, i64* %7, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N62 ) - (int V_197 = V_195) -> (GeneralNode N63 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %10 = load i64, i64* %6, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N63 ) - (int V_198 = V_194) -> (GeneralNode N64 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %11 = add i64 %10, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %10 = load i64, i64* %6, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %10 = load i64, i64* %6, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N64 ) - (int V_199 = V_198+-8) -> (GeneralNode N65 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %12 = inttoptr i64 %11 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %11 = add i64 %10, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N65 ) - (int* V_200 = (int*)V_199) -> (GeneralNode N66 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %9, i64* %12
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %13 = ptrtoint i32* %8 to i64
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %8 = alloca i32, align 4
  Instruction-value 
  Pointer to :  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N67 ) - (int V_201 = (int)V_196) -> (GeneralNode N68 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %14 = load i32, i32* %5, align 4
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N68 ) - (int V_202 = V_193) -> (GeneralNode N69 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i32 %14, i32* %8
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %15 = inttoptr i64 %11 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %11 = add i64 %10, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N70 ) - (int* V_203 = (int*)V_199) -> (GeneralNode N71 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %16 = load i64, i64* %15
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N71 ) - (int V_204 = V_203) -> (GeneralNode N72 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %16, i64* %7, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %17 = inttoptr i64 %10 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %10 = load i64, i64* %6, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N73 ) - (int* V_205 = (int*)V_198) -> (GeneralNode N74 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %18 = load i64, i64* %17
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N74 ) - (int V_206 = V_205) -> (GeneralNode N75 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %18, i64* %3, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %19 = add i64 %10, 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %10 = load i64, i64* %6, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %10 = load i64, i64* %6, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N76 ) - (int V_207 = V_198+8) -> (GeneralNode N77 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %19, i64* %6, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
------------return-ins -------------
Terminator instruction:   ret %struct.Memory* %2
number of operands: 1 
instr: 
Instruction:   ret %struct.Memory* %2
number of operands: 1 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 instruction: 
 @DR0 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR1 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR2 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR3 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR4 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR5 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR6 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR7 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @gCR0 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR1 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR2 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR3 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR4 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR8 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600e50__init_array = internal global %seg_600e50__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004a0___do_global_dtors_aux to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600ff0__got = internal global %seg_600ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @__bss_start = global %__bss_start_type zeroinitializer 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @0 = internal global i1 false 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @1 = internal constant void ()* @__mcsema_attach_call 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @2 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0_frame_dummy_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004a0___do_global_dtors_aux_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400600___libc_csu_fini_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400590___libc_csu_init_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @log_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @recv_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @check_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @constructReply_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @C2_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @send_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
look for the first block of the function: sub_4004ff_log
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 33 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N80 ) - (int* V_244 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_243+0) -> (GeneralNode N81 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
number of operands: 5 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 11 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N81 ) - (struct union.anon{
int i64;
} union.anon* V_245 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_243+0) -> (GeneralNode N82 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %5 = bitcast %union.anon* %4 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  Instruction-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  Argument-value 
  Void-type 
  Instruction-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N82 ) - (int* V_246 = (int*)V_245) -> (GeneralNode N83 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 13 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N83 ) - (int* V_247 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_243+0) -> (GeneralNode N84 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 15 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N84 ) - (int* V_248 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_243+0) -> (GeneralNode N85 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %8 = alloca i32, align 4 
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
-------operand value kind and type kind------- 
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N85 ) - (int* V_249) -> (GeneralNode N86 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %9 = load i64, i64* %7, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N86 ) - (int V_250 = V_248) -> (GeneralNode N87 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %10 = load i64, i64* %6, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N87 ) - (int V_251 = V_247) -> (GeneralNode N88 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %11 = add i64 %10, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %10 = load i64, i64* %6, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %10 = load i64, i64* %6, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N88 ) - (int V_252 = V_251+-8) -> (GeneralNode N89 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %12 = inttoptr i64 %11 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %11 = add i64 %10, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N89 ) - (int* V_253 = (int*)V_252) -> (GeneralNode N90 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %9, i64* %12
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %13 = ptrtoint i32* %8 to i64
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %8 = alloca i32, align 4
  Instruction-value 
  Pointer to :  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N91 ) - (int V_254 = (int)V_249) -> (GeneralNode N92 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %14 = load i32, i32* %5, align 4
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N92 ) - (int V_255 = V_246) -> (GeneralNode N93 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i32 %14, i32* %8
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %15 = inttoptr i64 %11 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %11 = add i64 %10, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N94 ) - (int* V_256 = (int*)V_252) -> (GeneralNode N95 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %16 = load i64, i64* %15
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N95 ) - (int V_257 = V_256) -> (GeneralNode N96 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %16, i64* %7, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %17 = inttoptr i64 %10 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %10 = load i64, i64* %6, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N97 ) - (int* V_258 = (int*)V_251) -> (GeneralNode N98 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %18 = load i64, i64* %17
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N98 ) - (int V_259 = V_258) -> (GeneralNode N99 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %18, i64* %3, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %19 = add i64 %10, 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %10 = load i64, i64* %6, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %10 = load i64, i64* %6, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N100 ) - (int V_260 = V_251+8) -> (GeneralNode N101 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %19, i64* %6, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
------------return-ins -------------
Terminator instruction:   ret %struct.Memory* %2
number of operands: 1 
instr: 
Instruction:   ret %struct.Memory* %2
number of operands: 1 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 instruction: 
 @DR0 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR1 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR2 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR3 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR4 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR5 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR6 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR7 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @gCR0 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR1 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR2 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR3 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR4 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR8 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600e50__init_array = internal global %seg_600e50__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004a0___do_global_dtors_aux to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600ff0__got = internal global %seg_600ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @__bss_start = global %__bss_start_type zeroinitializer 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @0 = internal global i1 false 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @1 = internal constant void ()* @__mcsema_attach_call 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @2 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0_frame_dummy_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004a0___do_global_dtors_aux_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400600___libc_csu_fini_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400590___libc_csu_init_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @log_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @recv_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @check_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @constructReply_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @C2_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @send_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
look for the first block of the function: sub_4004f3_check
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 33 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N104 ) - (int* V_297 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N105 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
number of operands: 5 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 11 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N105 ) - (struct union.anon{
int i64;
} union.anon* V_298 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N106 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %5 = bitcast %union.anon* %4 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  Instruction-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  Argument-value 
  Void-type 
  Instruction-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N106 ) - (int* V_299 = (int*)V_298) -> (GeneralNode N107 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 1 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N107 ) - (int* V_300 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N108 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 13 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N108 ) - (int* V_301 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N109 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 15 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N109 ) - (int* V_302 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N110 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %9 = alloca i32, align 4 
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
-------operand value kind and type kind------- 
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N110 ) - (int* V_303) -> (GeneralNode N111 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %10 = load i64, i64* %8, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N111 ) - (int V_304 = V_302) -> (GeneralNode N112 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %11 = load i64, i64* %7, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N112 ) - (int V_305 = V_301) -> (GeneralNode N113 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %12 = add i64 %11, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %11 = load i64, i64* %7, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %11 = load i64, i64* %7, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N113 ) - (int V_306 = V_305+-8) -> (GeneralNode N114 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %13 = inttoptr i64 %12 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %12 = add i64 %11, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N114 ) - (int* V_307 = (int*)V_306) -> (GeneralNode N115 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %10, i64* %13
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %14 = ptrtoint i32* %9 to i64
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %9 = alloca i32, align 4
  Instruction-value 
  Pointer to :  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N116 ) - (int V_308 = (int)V_303) -> (GeneralNode N117 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %15 = load i32, i32* %5, align 4
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N117 ) - (int V_309 = V_299) -> (GeneralNode N118 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i32 %15, i32* %9
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %16 = load i32, i32* %9
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N119 ) - (int V_310 = V_303) -> (GeneralNode N120 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %17 = zext i32 %16 to i64 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N120 ) - (int V_311) -> (GeneralNode N121 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %17, i64* %6, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %18 = inttoptr i64 %12 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %12 = add i64 %11, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N122 ) - (int* V_312 = (int*)V_306) -> (GeneralNode N123 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %19 = load i64, i64* %18
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N123 ) - (int V_313 = V_312) -> (GeneralNode N124 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %19, i64* %8, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %20 = inttoptr i64 %11 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %11 = load i64, i64* %7, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N125 ) - (int* V_314 = (int*)V_305) -> (GeneralNode N126 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %21 = load i64, i64* %20
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N126 ) - (int V_315 = V_314) -> (GeneralNode N127 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %21, i64* %3, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %22 = add i64 %11, 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %11 = load i64, i64* %7, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %11 = load i64, i64* %7, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N128 ) - (int V_316 = V_305+8) -> (GeneralNode N129 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %22, i64* %7, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
------------return-ins -------------
Terminator instruction:   ret %struct.Memory* %2
number of operands: 1 
instr: 
Instruction:   ret %struct.Memory* %2
number of operands: 1 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 instruction: 
 @DR0 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR1 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR2 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR3 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR4 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR5 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR6 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR7 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @gCR0 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR1 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR2 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR3 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR4 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR8 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600e50__init_array = internal global %seg_600e50__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004a0___do_global_dtors_aux to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600ff0__got = internal global %seg_600ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @__bss_start = global %__bss_start_type zeroinitializer 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @0 = internal global i1 false 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @1 = internal constant void ()* @__mcsema_attach_call 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @2 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0_frame_dummy_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004a0___do_global_dtors_aux_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400600___libc_csu_fini_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400590___libc_csu_init_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @log_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @recv_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @check_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @constructReply_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @C2_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @send_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
look for the first block of the function: sub_4004ea_constructReply
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 33 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N132 ) - (int* V_353 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_352+0) -> (GeneralNode N133 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 1 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N133 ) - (int* V_354 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_352+0) -> (GeneralNode N134 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 13 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N134 ) - (int* V_355 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_352+0) -> (GeneralNode N135 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 15 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N135 ) - (int* V_356 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_352+0) -> (GeneralNode N136 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %7 = alloca i32, align 4 
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
-------operand value kind and type kind------- 
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N136 ) - (int* V_357) -> (GeneralNode N137 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %8 = load i64, i64* %6, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N137 ) - (int V_358 = V_356) -> (GeneralNode N138 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %9 = load i64, i64* %5, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N138 ) - (int V_359 = V_355) -> (GeneralNode N139 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %10 = add i64 %9, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %9 = load i64, i64* %5, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %9 = load i64, i64* %5, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N139 ) - (int V_360 = V_359+-8) -> (GeneralNode N140 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %11 = inttoptr i64 %10 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %10 = add i64 %9, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N140 ) - (int* V_361 = (int*)V_360) -> (GeneralNode N141 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %8, i64* %11
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %12 = ptrtoint i32* %7 to i64
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %7 = alloca i32, align 4
  Instruction-value 
  Pointer to :  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N142 ) - (int V_362 = (int)V_357) -> (GeneralNode N143 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %13 = load i32, i32* %7
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N143 ) - (int V_363 = V_357) -> (GeneralNode N144 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %14 = zext i32 %13 to i64 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N144 ) - (int V_364) -> (GeneralNode N145 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %14, i64* %4, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %15 = inttoptr i64 %10 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %10 = add i64 %9, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N146 ) - (int* V_365 = (int*)V_360) -> (GeneralNode N147 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %16 = load i64, i64* %15
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N147 ) - (int V_366 = V_365) -> (GeneralNode N148 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %16, i64* %6, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %17 = inttoptr i64 %9 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %9 = load i64, i64* %5, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N149 ) - (int* V_367 = (int*)V_359) -> (GeneralNode N150 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %18 = load i64, i64* %17
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N150 ) - (int V_368 = V_367) -> (GeneralNode N151 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %18, i64* %3, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %19 = add i64 %9, 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %9 = load i64, i64* %5, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %9 = load i64, i64* %5, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N152 ) - (int V_369 = V_359+8) -> (GeneralNode N153 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %19, i64* %5, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
------------return-ins -------------
Terminator instruction:   ret %struct.Memory* %2
number of operands: 1 
instr: 
Instruction:   ret %struct.Memory* %2
number of operands: 1 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 instruction: 
 @DR0 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR1 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR2 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR3 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR4 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR5 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR6 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR7 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @gCR0 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR1 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR2 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR3 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR4 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR8 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600e50__init_array = internal global %seg_600e50__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004a0___do_global_dtors_aux to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600ff0__got = internal global %seg_600ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @__bss_start = global %__bss_start_type zeroinitializer 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @0 = internal global i1 false 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @1 = internal constant void ()* @__mcsema_attach_call 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @2 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0_frame_dummy_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004a0___do_global_dtors_aux_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400600___libc_csu_fini_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400590___libc_csu_init_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @log_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @recv_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @check_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @constructReply_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @C2_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @send_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
look for the first block of the function: sub_40056f_main
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 33 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N156 ) - (int* V_406 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N157 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 1 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N157 ) - (int* V_407 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N158 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 7 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N158 ) - (int* V_408 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N159 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 9 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N159 ) - (int* V_409 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N160 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 11 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N160 ) - (int* V_410 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N161 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 13 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N161 ) - (int* V_411 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N162 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 15 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N162 ) - (int* V_412 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N163 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %10 = alloca i32, align 4 
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
-------operand value kind and type kind------- 
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N163 ) - (int* V_413) -> (GeneralNode N164 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %11 = alloca i32, align 4 
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
-------operand value kind and type kind------- 
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N164 ) - (int* V_414) -> (GeneralNode N165 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %12 = load i64, i64* %9, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N165 ) - (int V_415 = V_412) -> (GeneralNode N166 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %13 = load i64, i64* %8, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N166 ) - (int V_416 = V_411) -> (GeneralNode N167 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %14 = add i64 %13, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %13 = load i64, i64* %8, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %13 = load i64, i64* %8, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N167 ) - (int V_417 = V_416+-8) -> (GeneralNode N168 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %15 = inttoptr i64 %14 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %14 = add i64 %13, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N168 ) - (int* V_418 = (int*)V_417) -> (GeneralNode N169 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %12, i64* %15
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %14, i64* %9, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %16 = ptrtoint i32* %11 to i64
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %11 = alloca i32, align 4
  Instruction-value 
  Pointer to :  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N171 ) - (int V_419 = (int)V_414) -> (GeneralNode N172 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %17 = load i32, i32* %11
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N172 ) - (int V_420 = V_414) -> (GeneralNode N173 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %18 = zext i32 %17 to i64 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N173 ) - (int V_421) -> (GeneralNode N174 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %18, i64* %5, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %19 = ptrtoint i32* %10 to i64
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %10 = alloca i32, align 4
  Instruction-value 
  Pointer to :  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N175 ) - (int V_422 = (int)V_413) -> (GeneralNode N176 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %20 = load i32, i32* %10
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N176 ) - (int V_423 = V_413) -> (GeneralNode N177 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %21 = zext i32 %20 to i64 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N177 ) - (int V_424) -> (GeneralNode N178 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %21, i64* %4, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %18, i64* %6, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %21, i64* %7, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %22 = add i64 %1, -102
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1: i64 %1
  Argument-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Argument-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Integer-type 
----function name:  -----
 opr1: i64 %1
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N181 ) - (int V_426 = param_V_425+-102) -> (GeneralNode N182 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %23 = add i64 %1, 23
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1: i64 %1
  Argument-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Argument-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Integer-type 
----function name:  -----
 opr1: i64 %1
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N182 ) - (int V_427 = param_V_425+23) -> (GeneralNode N183 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %24 = add i64 %13, -32
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %13 = load i64, i64* %8, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %13 = load i64, i64* %8, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N183 ) - (int V_428 = V_416+-32) -> (GeneralNode N184 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %25 = inttoptr i64 %24 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %24 = add i64 %13, -32
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N184 ) - (int* V_429 = (int*)V_428) -> (GeneralNode N185 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %23, i64* %25
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %24, i64* %8, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %26 = call %struct.Memory* @sub_400509_C2(%struct.State* nonnull %0, i64 %22, %struct.Memory* %2) 
number of operands: 4 
  Fuction-Value 
  Pointer to :  Function-type 
-----callee name: sub_400509_C2
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 0, i64* %4, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  ConstantInt-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %27 = load i64, i64* %9, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N189 ) - (int V_430 = V_412) -> (GeneralNode N190 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %28 = inttoptr i64 %27 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %27 = load i64, i64* %9, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N190 ) - (int* V_431 = (int*)V_430) -> (GeneralNode N191 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %29 = load i64, i64* %28
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N191 ) - (int V_432 = V_431) -> (GeneralNode N192 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %29, i64* %9, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %30 = add i64 %27, 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %27 = load i64, i64* %9, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %27 = load i64, i64* %9, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N193 ) - (int V_433 = V_430+8) -> (GeneralNode N194 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %31 = inttoptr i64 %30 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %30 = add i64 %27, 8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N194 ) - (int* V_434 = (int*)V_433) -> (GeneralNode N195 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %32 = load i64, i64* %31
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N195 ) - (int V_435 = V_434) -> (GeneralNode N196 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %32, i64* %3, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %33 = add i64 %27, 16
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %27 = load i64, i64* %9, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %27 = load i64, i64* %9, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N197 ) - (int V_436 = V_430+16) -> (GeneralNode N198 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %33, i64* %8, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
------------return-ins -------------
Terminator instruction:   ret %struct.Memory* %26
number of operands: 1 
instr: 
Instruction:   ret %struct.Memory* %26
number of operands: 1 
  Instruction-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
----function name:  -----
 instruction: 
 @DR0 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR1 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR2 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR3 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR4 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR5 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR6 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @DR7 = external global i64, align 8 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @gCR0 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR1 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR2 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR3 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR4 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @gCR8 = external global %union.anon, align 1 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600e50__init_array = internal global %seg_600e50__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004a0___do_global_dtors_aux to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @seg_600ff0__got = internal global %seg_600ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }> 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @__bss_start = global %__bss_start_type zeroinitializer 
-------instruction type-------
  Pointer to :  Stuct-type 
instruction: 
 @0 = internal global i1 false 
-------instruction type-------
  Pointer to :  Integer-type 
instruction: 
 @1 = internal constant void ()* @__mcsema_attach_call 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @2 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0_frame_dummy_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004a0___do_global_dtors_aux_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400600___libc_csu_fini_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400590___libc_csu_init_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @log_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @recv_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @check_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @constructReply_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @C2_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @send_wrapper 
-------instruction type-------
  Pointer to :  Pointer to :  Function-type 
instruction: 
 @llvm.global_dtors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
instruction: 
 @llvm.global_ctors = appending constant [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }] 
-------instruction type-------
  Pointer to :  Array-type 
look for the first block of the function: sub_400509_C2
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 33 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N202 ) - (int* V_473 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N203 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
number of operands: 5 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 1 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N203 ) - (struct union.anon{
int i64;
} union.anon* V_474 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N204 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %5 = bitcast %union.anon* %4 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  Instruction-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  Argument-value 
  Void-type 
  Instruction-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N204 ) - (int* V_475 = (int*)V_474) -> (GeneralNode N205 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
number of operands: 5 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 9 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N205 ) - (struct union.anon{
int i64;
} union.anon* V_476 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N206 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %7 = bitcast %union.anon* %6 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  Instruction-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  Argument-value 
  Void-type 
  Instruction-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N206 ) - (int* V_477 = (int*)V_476) -> (GeneralNode N207 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
number of operands: 5 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 11 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N207 ) - (struct union.anon{
int i64;
} union.anon* V_478 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N208 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %9 = bitcast %union.anon* %8 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  Instruction-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  Argument-value 
  Void-type 
  Instruction-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N208 ) - (int* V_479 = (int*)V_478) -> (GeneralNode N209 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %10 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 3 
-----operand1: --------
opr1:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  Instruction-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Instruction-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N209 ) - (int* V_480 = i64.V_474+0) -> (GeneralNode N210 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %11 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 3 
-----operand1: --------
opr1:   %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  Instruction-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Instruction-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N210 ) - (int* V_481 = i64.V_478+0) -> (GeneralNode N211 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 13 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N211 ) - (int* V_482 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N212 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 6 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 6 /nindex value: i32 15 /nindex value: i32 0 /nindex value: i32 0 /ntcfa: DeclarationEdge: (GeneralNode N212 ) - (int* V_483 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N213 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %14 = load i64, i64* %13, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N213 ) - (int V_484 = V_483) -> (GeneralNode N214 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %15 = load i64, i64* %12, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N214 ) - (int V_485 = V_482) -> (GeneralNode N215 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %16 = add i64 %15, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %15 = load i64, i64* %12, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %15 = load i64, i64* %12, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N215 ) - (int V_486 = V_485+-8) -> (GeneralNode N216 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %17 = inttoptr i64 %16 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %16 = add i64 %15, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N216 ) - (int* V_487 = (int*)V_486) -> (GeneralNode N217 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %14, i64* %17
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %16, i64* %13, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %18 = add i64 %15, -32
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %15 = load i64, i64* %12, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %15 = load i64, i64* %12, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N219 ) - (int V_488 = V_485+-32) -> (GeneralNode N220 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %18, i64* %12, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 4 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 2 /nindex value: i32 1 /ntcfa: DeclarationEdge: (GeneralNode N221 ) - (int* V_489 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N222 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 4 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 2 /nindex value: i32 3 /ntcfa: DeclarationEdge: (GeneralNode N222 ) - (int* V_490 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N223 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 4 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 2 /nindex value: i32 5 /ntcfa: DeclarationEdge: (GeneralNode N223 ) - (int* V_491 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N224 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 4 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 2 /nindex value: i32 7 /ntcfa: DeclarationEdge: (GeneralNode N224 ) - (int* V_492 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N225 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 4 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 2 /nindex value: i32 9 /ntcfa: DeclarationEdge: (GeneralNode N225 ) - (int* V_493 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N226 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 4 
-----operand1: --------
opr1: %struct.State* %0
  Argument-value 
  Pointer to :  Stuct-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
  Argument-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Pointer to :  Stuct-type 
----function name:  -----
 index value: i64 0 /nindex value: i32 2 /nindex value: i32 13 /ntcfa: DeclarationEdge: (GeneralNode N226 ) - (int* V_494 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N227 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %25 = add i64 %15, -28
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %15 = load i64, i64* %12, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %15 = load i64, i64* %12, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N227 ) - (int V_495 = V_485+-28) -> (GeneralNode N228 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %26 = load i32, i32* %9, align 4
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N228 ) - (int V_496 = V_479) -> (GeneralNode N229 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %27 = inttoptr i64 %25 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %25 = add i64 %15, -28
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N229 ) - (int* V_497 = (int*)V_495) -> (GeneralNode N230 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i32 %26, i32* %27
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %28 = add i64 %15, -32
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %15 = load i64, i64* %12, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %15 = load i64, i64* %12, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N231 ) - (int V_498 = V_485+-32) -> (GeneralNode N232 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %29 = load i32, i32* %7, align 4
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N232 ) - (int V_499 = V_477) -> (GeneralNode N233 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %30 = inttoptr i64 %28 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %28 = add i64 %15, -32
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N233 ) - (int* V_500 = (int*)V_498) -> (GeneralNode N234 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i32 %29, i32* %30
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %31 = add i64 %1, 93
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1: i64 %1
  Argument-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Argument-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Argument-value 
  Integer-type 
----function name:  -----
 opr1: i64 %1
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N235 ) - (int V_502 = param_V_501+93) -> (GeneralNode N236 )
-----------------------------;
instruction value kind: 
  Instruction-value 
Terminator instruction:   br label %block_400566
number of operands: 1 
instr: 
Instruction:   br label %block_400566
number of operands: 1 
-----branch destination: --------
  BasicBlock-value 
  Label-type 
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %32 = add i64 %86, -85
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %86 = add i64 %70, %85
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %86 = add i64 %70, %85
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N238 ) - (int V_504 = V_503+-85) -> (GeneralNode N239 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %33 = add i64 %86, 10
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %86 = add i64 %70, %85
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %86 = add i64 %70, %85
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N239 ) - (int V_505 = V_503+10) -> (GeneralNode N240 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %34 = load i64, i64* %12, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N240 ) - (int V_506 = V_482) -> (GeneralNode N241 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %35 = add i64 %34, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %34 = load i64, i64* %12, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %34 = load i64, i64* %12, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N241 ) - (int V_507 = V_506+-8) -> (GeneralNode N242 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %36 = inttoptr i64 %35 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %35 = add i64 %34, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N242 ) - (int* V_508 = (int*)V_507) -> (GeneralNode N243 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %33, i64* %36
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %35, i64* %12, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %37 = tail call %struct.Memory* @sub_4004ea_constructReply(%struct.State* nonnull %0, i64 %32, %struct.Memory* %66) 
number of operands: 4 
  Fuction-Value 
  Pointer to :  Function-type 
-----callee name: sub_4004ea_constructReply
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %38 = load i64, i64* %13, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N246 ) - (int V_509 = V_483) -> (GeneralNode N247 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %39 = add i64 %38, -4
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %38 = load i64, i64* %13, align 8
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %38 = load i64, i64* %13, align 8
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N247 ) - (int V_510 = V_509+-4) -> (GeneralNode N248 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %40 = load i32, i32* %5, align 4
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N248 ) - (int V_511 = V_475) -> (GeneralNode N249 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %41 = load i64, i64* %3, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N249 ) - (int V_512 = V_473) -> (GeneralNode N250 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %42 = inttoptr i64 %39 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %39 = add i64 %38, -4
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N250 ) - (int* V_513 = (int*)V_510) -> (GeneralNode N251 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i32 %40, i32* %42
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %43 = inttoptr i64 %39 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %39 = add i64 %38, -4
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N252 ) - (int* V_514 = (int*)V_510) -> (GeneralNode N253 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %44 = load i32, i32* %43
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N253 ) - (int V_515 = V_514) -> (GeneralNode N254 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %45 = zext i32 %44 to i64 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N254 ) - (int V_516) -> (GeneralNode N255 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %45, i64* %10, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %45, i64* %11, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %46 = add i64 %41, -105
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %41 = load i64, i64* %3, align 8
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %41 = load i64, i64* %3, align 8
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N257 ) - (int V_517 = V_512+-105) -> (GeneralNode N258 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %47 = add i64 %41, 13
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %41 = load i64, i64* %3, align 8
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %41 = load i64, i64* %3, align 8
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N258 ) - (int V_518 = V_512+13) -> (GeneralNode N259 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %48 = load i64, i64* %12, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N259 ) - (int V_519 = V_482) -> (GeneralNode N260 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %49 = add i64 %48, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %48 = load i64, i64* %12, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %48 = load i64, i64* %12, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N260 ) - (int V_520 = V_519+-8) -> (GeneralNode N261 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %50 = inttoptr i64 %49 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %49 = add i64 %48, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N261 ) - (int* V_521 = (int*)V_520) -> (GeneralNode N262 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %47, i64* %50
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %49, i64* %12, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %51 = tail call %struct.Memory* @sub_4004e0_send(%struct.State* nonnull %0, i64 %46, %struct.Memory* %37) 
number of operands: 4 
  Fuction-Value 
  Pointer to :  Function-type 
-----callee name: sub_4004e0_send
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %52 = load i64, i64* %3, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N265 ) - (int V_522 = V_473) -> (GeneralNode N266 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %53 = add i64 %52, 12
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %52 = load i64, i64* %3, align 8
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %52 = load i64, i64* %3, align 8
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N266 ) - (int V_523 = V_522+12) -> (GeneralNode N267 )
-----------------------------;
instruction value kind: 
  Instruction-value 
Terminator instruction:   br label %block_400562
number of operands: 1 
instr: 
Instruction:   br label %block_400562
number of operands: 1 
-----branch destination: --------
  BasicBlock-value 
  Label-type 
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %54 = add i64 %118, -89
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %118 = add i64 %102, %117
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %118 = add i64 %102, %117
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N269 ) - (int V_525 = V_524+-89) -> (GeneralNode N270 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %55 = add i64 %118, 10
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %118 = add i64 %102, %117
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %118 = add i64 %102, %117
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N270 ) - (int V_526 = V_524+10) -> (GeneralNode N271 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %56 = load i64, i64* %12, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N271 ) - (int V_527 = V_482) -> (GeneralNode N272 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %57 = add i64 %56, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %56 = load i64, i64* %12, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %56 = load i64, i64* %12, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N272 ) - (int V_528 = V_527+-8) -> (GeneralNode N273 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %58 = inttoptr i64 %57 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %57 = add i64 %56, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N273 ) - (int* V_529 = (int*)V_528) -> (GeneralNode N274 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %55, i64* %58
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %57, i64* %12, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %59 = tail call %struct.Memory* @sub_4004ff_log(%struct.State* nonnull %0, i64 %54, %struct.Memory* %98) 
number of operands: 4 
  Fuction-Value 
  Pointer to :  Function-type 
-----callee name: sub_4004ff_log
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %60 = load i64, i64* %3, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N277 ) - (int V_530 = V_473) -> (GeneralNode N278 )
-----------------------------;
instruction value kind: 
  Instruction-value 
Terminator instruction:   br label %block_400562
number of operands: 1 
instr: 
Instruction:   br label %block_400562
number of operands: 1 
-----branch destination: --------
  BasicBlock-value 
  Label-type 
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %61 = add i64 %118, -57
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %118 = add i64 %102, %117
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %118 = add i64 %102, %117
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N280 ) - (int V_531 = V_524+-57) -> (GeneralNode N281 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %62 = add i64 %118, 10
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %118 = add i64 %102, %117
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %118 = add i64 %102, %117
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N281 ) - (int V_532 = V_524+10) -> (GeneralNode N282 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %63 = load i64, i64* %12, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N282 ) - (int V_533 = V_482) -> (GeneralNode N283 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %64 = add i64 %63, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %63 = load i64, i64* %12, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %63 = load i64, i64* %12, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N283 ) - (int V_534 = V_533+-8) -> (GeneralNode N284 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %65 = inttoptr i64 %64 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %64 = add i64 %63, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N284 ) - (int* V_535 = (int*)V_534) -> (GeneralNode N285 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %62, i64* %65
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %64, i64* %12, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %66 = tail call %struct.Memory* @sub_4004f3_check(%struct.State* nonnull %0, i64 %61, %struct.Memory* %98) 
number of operands: 4 
  Fuction-Value 
  Pointer to :  Function-type 
-----callee name: sub_4004f3_check
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %67 = load i64, i64* %13, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N288 ) - (int V_536 = V_483) -> (GeneralNode N289 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %68 = add i64 %67, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %67 = load i64, i64* %13, align 8
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %67 = load i64, i64* %13, align 8
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N289 ) - (int V_537 = V_536+-8) -> (GeneralNode N290 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %69 = load i32, i32* %5, align 4
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N290 ) - (int V_538 = V_475) -> (GeneralNode N291 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %70 = load i64, i64* %3, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N291 ) - (int V_539 = V_473) -> (GeneralNode N292 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %71 = inttoptr i64 %68 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %68 = add i64 %67, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N292 ) - (int* V_540 = (int*)V_537) -> (GeneralNode N293 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i32 %69, i32* %71
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %72 = inttoptr i64 %68 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %68 = add i64 %67, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N294 ) - (int* V_541 = (int*)V_537) -> (GeneralNode N295 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %73 = load i32, i32* %72
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N295 ) - (int V_542 = V_541) -> (GeneralNode N296 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 0, i8* %19, align 1, !tbaa !1265
number of operands: 2 
-----operand1: --------
  ConstantInt-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %74 = and i32 %73, 255
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %73 = load i32, i32* %72
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %73 = load i32, i32* %72
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N297 ) - (int V_543 = V_542&255) -> (GeneralNode N298 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #6 
number of operands: 2 
  Fuction-Value 
  Pointer to :  Function-type 
-----callee name: llvm.ctpop.i32
 -----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %76 = trunc i32 %75 to i8 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N299 ) - (int V_544) -> (GeneralNode N300 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %77 = and i8 %76, 1
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %76 = trunc i32 %75 to i8
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %76 = trunc i32 %75 to i8
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N300 ) - (int V_545 = V_544&1) -> (GeneralNode N301 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %78 = xor i8 %77, 1
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %77 = and i8 %76, 1
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %77 = and i8 %76, 1
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N301 ) - (int V_546 = V_545^1) -> (GeneralNode N302 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 %78, i8* %20, align 1, !tbaa !1279
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 0, i8* %21, align 1, !tbaa !1280
number of operands: 2 
-----operand1: --------
  ConstantInt-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %79 = icmp eq i32 %73, 0
-------instruction type-------
  Integer-type 
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %73 = load i32, i32* %72
-----operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N304 ) - (int V_547 = V_542=0) -> (GeneralNode N305 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %80 = zext i1 %79 to i8 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N305 ) - (int V_548) -> (GeneralNode N306 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 %80, i8* %22, align 1, !tbaa !1281
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %81 = lshr i32 %73, 31
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %73 = load i32, i32* %72
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %73 = load i32, i32* %72
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N307 ) - (int V_549 = V_542>>31) -> (GeneralNode N308 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %82 = trunc i32 %81 to i8 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N308 ) - (int V_550) -> (GeneralNode N309 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 %82, i8* %23, align 1, !tbaa !1282
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 0, i8* %24, align 1, !tbaa !1283
number of operands: 2 
-----operand1: --------
  ConstantInt-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %83 = icmp ne i8 %82, 0
-------instruction type-------
  Integer-type 
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %82 = trunc i32 %81 to i8
-----operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N311 ) - (int V_551 = V_550!=0) -> (GeneralNode N312 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %84 = or i1 %79, %83
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %79 = icmp eq i32 %73, 0
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %79 = icmp eq i32 %73, 0
-----create from arithmetic op -> operand2: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N312 ) - (int V_552 = V_547|V_551) -> (GeneralNode N313 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %85 = select i1 %84, i64 44, i64 9 
-------instruction type-------  Integer-type 
number of operands: 3 
-----select condition: --------
  Instruction-value 
  Integer-type 
-----branch destination1: --------
  ConstantInt-value 
  Integer-type 
-----des1: i64 44
-----branch destination2: --------
  ConstantInt-value 
  Integer-type 
-----des2: i64 9
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: AssumeEdge: (GeneralNode N313 ) - (1=V_552) -> (GeneralNode N412 )
tcfa: AssumeEdge: (GeneralNode N313 ) - (not 1=V_552) -> (GeneralNode N413 )
tcfa: DeclarationEdge: (GeneralNode N412 ) - (int V_553 = 44) -> (GeneralNode N314 )
tcfa: DeclarationEdge: (GeneralNode N413 ) - (int V_553 = 44) -> (GeneralNode N314 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %86 = add i64 %70, %85
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %70 = load i64, i64* %3, align 8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %70 = load i64, i64* %3, align 8
-----create from arithmetic op -> operand2: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N314 ) - (int V_503) -> (GeneralNode N315 )
-----------------------------;
instruction value kind: 
  Instruction-value 
Terminator instruction:   br i1 %84, label %block_400562, label %block_40053f
number of operands: 3 
instr: 
Instruction:   br i1 %84, label %block_400562, label %block_40053f
number of operands: 3 
-----branch condition: --------
  Instruction-value 
  Integer-type 
-----branch destination1: --------
  BasicBlock-value 
  Label-type 
-----des1: 
block_40053f:                                     ; preds = %block_40052c
  %32 = add i64 %86, -85
  %33 = add i64 %86, 10
  %34 = load i64, i64* %12, align 8, !tbaa !1261
  %35 = add i64 %34, -8
  %36 = inttoptr i64 %35 to i64*
  store i64 %33, i64* %36
  store i64 %35, i64* %12, align 8, !tbaa !1261
  %37 = tail call %struct.Memory* @sub_4004ea_constructReply(%struct.State* nonnull %0, i64 %32, %struct.Memory* %66)
  %38 = load i64, i64* %13, align 8
  %39 = add i64 %38, -4
  %40 = load i32, i32* %5, align 4
  %41 = load i64, i64* %3, align 8
  %42 = inttoptr i64 %39 to i32*
  store i32 %40, i32* %42
  %43 = inttoptr i64 %39 to i32*
  %44 = load i32, i32* %43
  %45 = zext i32 %44 to i64
  store i64 %45, i64* %10, align 8, !tbaa !1261
  store i64 %45, i64* %11, align 8, !tbaa !1261
  %46 = add i64 %41, -105
  %47 = add i64 %41, 13
  %48 = load i64, i64* %12, align 8, !tbaa !1261
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %47, i64* %50
  store i64 %49, i64* %12, align 8, !tbaa !1261
  %51 = tail call %struct.Memory* @sub_4004e0_send(%struct.State* nonnull %0, i64 %46, %struct.Memory* %37)
  %52 = load i64, i64* %3, align 8
  %53 = add i64 %52, 12
  br label %block_400562

-----branch destination2: --------
  BasicBlock-value 
  Label-type 
-----des2: 
block_400562:                                     ; preds = %block_40052c, %block_400558, %block_40053f
  %140 = phi i64 [ %60, %block_400558 ], [ %86, %block_40052c ], [ %53, %block_40053f ]
  %141 = phi %struct.Memory* [ %59, %block_400558 ], [ %66, %block_40052c ], [ %51, %block_40053f ]
  %142 = load i64, i64* %13, align 8
  %143 = add i64 %142, -20
  %144 = add i64 %140, 4
  %145 = inttoptr i64 %143 to i32*
  %146 = load i32, i32* %145
  %147 = add i32 %146, -1
  %148 = inttoptr i64 %143 to i32*
  store i32 %147, i32* %148
  br label %block_400566

----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: AssumeEdge: (GeneralNode N315 ) - (1=V_552) -> (GeneralNode N237 )
tcfa: AssumeEdge: (GeneralNode N315 ) - (not 1=V_552) -> (GeneralNode N395 )
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %87 = inttoptr i64 %121 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %121 = phi i64 [ %16, %block_400509 ], [ %142, %block_400562 ]
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N317 ) - (int* V_555 = (int*)V_554) -> (GeneralNode N318 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %88 = load i64, i64* %87
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N318 ) - (int V_556 = V_555) -> (GeneralNode N319 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %88, i64* %13, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %89 = add i64 %121, 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %121 = phi i64 [ %16, %block_400509 ], [ %142, %block_400562 ]
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %121 = phi i64 [ %16, %block_400509 ], [ %142, %block_400562 ]
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N320 ) - (int V_557 = V_554+8) -> (GeneralNode N321 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %90 = inttoptr i64 %89 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %89 = add i64 %121, 8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N321 ) - (int* V_558 = (int*)V_557) -> (GeneralNode N322 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %91 = load i64, i64* %90
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N322 ) - (int V_559 = V_558) -> (GeneralNode N323 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %91, i64* %3, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %92 = add i64 %121, 16
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %121 = phi i64 [ %16, %block_400509 ], [ %142, %block_400562 ]
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %121 = phi i64 [ %16, %block_400509 ], [ %142, %block_400562 ]
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N324 ) - (int V_560 = V_554+16) -> (GeneralNode N325 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %92, i64* %12, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
------------return-ins -------------
Terminator instruction:   ret %struct.Memory* %122
number of operands: 1 
instr: 
Instruction:   ret %struct.Memory* %122
number of operands: 1 
  Instruction-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
----function name:  -----
 Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %93 = add i64 %139, -66
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %139 = add i64 %120, %138
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %139 = add i64 %120, %138
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N328 ) - (int V_563 = V_562+-66) -> (GeneralNode N329 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %94 = add i64 %139, 10
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %139 = add i64 %120, %138
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %139 = add i64 %120, %138
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N329 ) - (int V_564 = V_562+10) -> (GeneralNode N330 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %95 = load i64, i64* %12, align 8, !tbaa !1261
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N330 ) - (int V_565 = V_482) -> (GeneralNode N331 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %96 = add i64 %95, -8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %95 = load i64, i64* %12, align 8, !tbaa !1261
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %95 = load i64, i64* %12, align 8, !tbaa !1261
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N331 ) - (int V_566 = V_565+-8) -> (GeneralNode N332 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %97 = inttoptr i64 %96 to i64*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %96 = add i64 %95, -8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N332 ) - (int* V_567 = (int*)V_566) -> (GeneralNode N333 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %94, i64* %97
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %96, i64* %12, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %98 = tail call %struct.Memory* @sub_4004d7_recv(%struct.State* nonnull %0, i64 %93, %struct.Memory* %122) 
number of operands: 4 
  Fuction-Value 
  Pointer to :  Function-type 
-----callee name: sub_4004d7_recv
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %99 = load i64, i64* %13, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N336 ) - (int V_568 = V_483) -> (GeneralNode N337 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %100 = add i64 %99, -12
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %99 = load i64, i64* %13, align 8
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %99 = load i64, i64* %13, align 8
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N337 ) - (int V_569 = V_568+-12) -> (GeneralNode N338 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %101 = load i32, i32* %5, align 4
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N338 ) - (int V_570 = V_475) -> (GeneralNode N339 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %102 = load i64, i64* %3, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N339 ) - (int V_571 = V_473) -> (GeneralNode N340 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %103 = inttoptr i64 %100 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %100 = add i64 %99, -12
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N340 ) - (int* V_572 = (int*)V_569) -> (GeneralNode N341 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i32 %101, i32* %103
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %104 = inttoptr i64 %100 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %100 = add i64 %99, -12
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N342 ) - (int* V_573 = (int*)V_569) -> (GeneralNode N343 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %105 = load i32, i32* %104
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N343 ) - (int V_574 = V_573) -> (GeneralNode N344 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 0, i8* %19, align 1, !tbaa !1265
number of operands: 2 
-----operand1: --------
  ConstantInt-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %106 = and i32 %105, 255
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %105 = load i32, i32* %104
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %105 = load i32, i32* %104
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N345 ) - (int V_575 = V_574&255) -> (GeneralNode N346 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #6 
number of operands: 2 
  Fuction-Value 
  Pointer to :  Function-type 
-----callee name: llvm.ctpop.i32
 -----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %108 = trunc i32 %107 to i8 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N347 ) - (int V_576) -> (GeneralNode N348 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %109 = and i8 %108, 1
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %108 = trunc i32 %107 to i8
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %108 = trunc i32 %107 to i8
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N348 ) - (int V_577 = V_576&1) -> (GeneralNode N349 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %110 = xor i8 %109, 1
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %109 = and i8 %108, 1
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %109 = and i8 %108, 1
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N349 ) - (int V_578 = V_577^1) -> (GeneralNode N350 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 %110, i8* %20, align 1, !tbaa !1279
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 0, i8* %21, align 1, !tbaa !1280
number of operands: 2 
-----operand1: --------
  ConstantInt-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %111 = icmp eq i32 %105, 0
-------instruction type-------
  Integer-type 
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %105 = load i32, i32* %104
-----operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N352 ) - (int V_579 = V_574=0) -> (GeneralNode N353 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %112 = zext i1 %111 to i8 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N353 ) - (int V_580) -> (GeneralNode N354 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 %112, i8* %22, align 1, !tbaa !1281
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %113 = lshr i32 %105, 31
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %105 = load i32, i32* %104
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %105 = load i32, i32* %104
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N355 ) - (int V_581 = V_574>>31) -> (GeneralNode N356 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %114 = trunc i32 %113 to i8 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N356 ) - (int V_582) -> (GeneralNode N357 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 %114, i8* %23, align 1, !tbaa !1282
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 0, i8* %24, align 1, !tbaa !1283
number of operands: 2 
-----operand1: --------
  ConstantInt-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %115 = icmp ne i8 %114, 0
-------instruction type-------
  Integer-type 
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %114 = trunc i32 %113 to i8
-----operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N359 ) - (int V_583 = V_582!=0) -> (GeneralNode N360 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %116 = or i1 %111, %115
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %111 = icmp eq i32 %105, 0
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %111 = icmp eq i32 %105, 0
-----create from arithmetic op -> operand2: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N360 ) - (int V_584 = V_579|V_583) -> (GeneralNode N361 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %117 = select i1 %116, i64 53, i64 9 
-------instruction type-------  Integer-type 
number of operands: 3 
-----select condition: --------
  Instruction-value 
  Integer-type 
-----branch destination1: --------
  ConstantInt-value 
  Integer-type 
-----des1: i64 53
-----branch destination2: --------
  ConstantInt-value 
  Integer-type 
-----des2: i64 9
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: AssumeEdge: (GeneralNode N361 ) - (1=V_584) -> (GeneralNode N416 )
tcfa: AssumeEdge: (GeneralNode N361 ) - (not 1=V_584) -> (GeneralNode N417 )
tcfa: DeclarationEdge: (GeneralNode N416 ) - (int V_585 = 53) -> (GeneralNode N362 )
tcfa: DeclarationEdge: (GeneralNode N417 ) - (int V_585 = 53) -> (GeneralNode N362 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %118 = add i64 %102, %117
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %102 = load i64, i64* %3, align 8
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %102 = load i64, i64* %3, align 8
-----create from arithmetic op -> operand2: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N362 ) - (int V_524) -> (GeneralNode N363 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %119 = zext i32 %105 to i64 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N363 ) - (int V_586) -> (GeneralNode N364 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %119, i64* %10, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i64 %119, i64* %11, align 8, !tbaa !1261
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
Terminator instruction:   br i1 %116, label %block_400558, label %block_40052c
number of operands: 3 
instr: 
Instruction:   br i1 %116, label %block_400558, label %block_40052c
number of operands: 3 
-----branch condition: --------
  Instruction-value 
  Integer-type 
-----branch destination1: --------
  BasicBlock-value 
  Label-type 
-----des1: 
block_40052c:                                     ; preds = %block_400519
  %61 = add i64 %118, -57
  %62 = add i64 %118, 10
  %63 = load i64, i64* %12, align 8, !tbaa !1261
  %64 = add i64 %63, -8
  %65 = inttoptr i64 %64 to i64*
  store i64 %62, i64* %65
  store i64 %64, i64* %12, align 8, !tbaa !1261
  %66 = tail call %struct.Memory* @sub_4004f3_check(%struct.State* nonnull %0, i64 %61, %struct.Memory* %98)
  %67 = load i64, i64* %13, align 8
  %68 = add i64 %67, -8
  %69 = load i32, i32* %5, align 4
  %70 = load i64, i64* %3, align 8
  %71 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %71
  %72 = inttoptr i64 %68 to i32*
  %73 = load i32, i32* %72
  store i8 0, i8* %19, align 1, !tbaa !1265
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #6
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !1279
  store i8 0, i8* %21, align 1, !tbaa !1280
  %79 = icmp eq i32 %73, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %22, align 1, !tbaa !1281
  %81 = lshr i32 %73, 31
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %23, align 1, !tbaa !1282
  store i8 0, i8* %24, align 1, !tbaa !1283
  %83 = icmp ne i8 %82, 0
  %84 = or i1 %79, %83
  %85 = select i1 %84, i64 44, i64 9
  %86 = add i64 %70, %85
  br i1 %84, label %block_400562, label %block_40053f

-----branch destination2: --------
  BasicBlock-value 
  Label-type 
-----des2: 
block_400558:                                     ; preds = %block_400519
  %54 = add i64 %118, -89
  %55 = add i64 %118, 10
  %56 = load i64, i64* %12, align 8, !tbaa !1261
  %57 = add i64 %56, -8
  %58 = inttoptr i64 %57 to i64*
  store i64 %55, i64* %58
  store i64 %57, i64* %12, align 8, !tbaa !1261
  %59 = tail call %struct.Memory* @sub_4004ff_log(%struct.State* nonnull %0, i64 %54, %struct.Memory* %98)
  %60 = load i64, i64* %3, align 8
  br label %block_400562

----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: AssumeEdge: (GeneralNode N366 ) - (1=V_584) -> (GeneralNode N279 )
tcfa: AssumeEdge: (GeneralNode N366 ) - (not 1=V_584) -> (GeneralNode N268 )
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %120 = phi i64 [ %31, %block_400509 ], [ %144, %block_400562 ] 
-------instruction type-------
  Integer-type 
number of operands: 2 
-----operand 0: --------
-----opr0:   %31 = add i64 %1, 93
  Instruction-value 
  Integer-type 
-----operand 1: --------
-----opr 1:   %144 = add i64 %140, 4
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N368 ) - (int V_587) -> (GeneralNode N369 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %121 = phi i64 [ %16, %block_400509 ], [ %142, %block_400562 ] 
-------instruction type-------
  Integer-type 
number of operands: 2 
-----operand 0: --------
-----opr0:   %16 = add i64 %15, -8
  Instruction-value 
  Integer-type 
-----operand 1: --------
-----opr 1:   %142 = load i64, i64* %13, align 8
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N369 ) - (int V_554) -> (GeneralNode N370 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %122 = phi %struct.Memory* [ %2, %block_400509 ], [ %141, %block_400562 ] 
-------instruction type-------
  Pointer to :  Stuct-type 
number of operands: 2 
-----operand 0: --------
-----opr0: %struct.Memory* %2
  Argument-value 
  Pointer to :  Stuct-type 
-----operand 1: --------
-----opr 1:   %141 = phi %struct.Memory* [ %59, %block_400558 ], [ %66, %block_40052c ], [ %51, %block_40053f ]
  Instruction-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N370 ) - (struct struct.Memory{

} struct.Memory* V_561) -> (GeneralNode N371 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %123 = add i64 %121, -20
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %121 = phi i64 [ %16, %block_400509 ], [ %142, %block_400562 ]
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %121 = phi i64 [ %16, %block_400509 ], [ %142, %block_400562 ]
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N371 ) - (int V_588 = V_554+-20) -> (GeneralNode N372 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %124 = inttoptr i64 %123 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %123 = add i64 %121, -20
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N372 ) - (int* V_589 = (int*)V_588) -> (GeneralNode N373 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %125 = load i32, i32* %124
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N373 ) - (int V_590 = V_589) -> (GeneralNode N374 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 0, i8* %19, align 1, !tbaa !1265
number of operands: 2 
-----operand1: --------
  ConstantInt-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %126 = and i32 %125, 255
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %125 = load i32, i32* %124
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %125 = load i32, i32* %124
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N375 ) - (int V_591 = V_590&255) -> (GeneralNode N376 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %127 = tail call i32 @llvm.ctpop.i32(i32 %126) #6 
number of operands: 2 
  Fuction-Value 
  Pointer to :  Function-type 
-----callee name: llvm.ctpop.i32
 -----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %128 = trunc i32 %127 to i8 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N377 ) - (int V_592) -> (GeneralNode N378 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %129 = and i8 %128, 1
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %128 = trunc i32 %127 to i8
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %128 = trunc i32 %127 to i8
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N378 ) - (int V_593 = V_592&1) -> (GeneralNode N379 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %130 = xor i8 %129, 1
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %129 = and i8 %128, 1
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %129 = and i8 %128, 1
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N379 ) - (int V_594 = V_593^1) -> (GeneralNode N380 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 %130, i8* %20, align 1, !tbaa !1279
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 0, i8* %21, align 1, !tbaa !1280
number of operands: 2 
-----operand1: --------
  ConstantInt-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %131 = icmp eq i32 %125, 0
-------instruction type-------
  Integer-type 
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %125 = load i32, i32* %124
-----operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N382 ) - (int V_595 = V_590=0) -> (GeneralNode N383 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %132 = zext i1 %131 to i8 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N383 ) - (int V_596) -> (GeneralNode N384 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 %132, i8* %22, align 1, !tbaa !1281
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %133 = lshr i32 %125, 31
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %125 = load i32, i32* %124
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %125 = load i32, i32* %124
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N385 ) - (int V_597 = V_590>>31) -> (GeneralNode N386 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %134 = trunc i32 %133 to i8 
-------instruction type-------  Integer-type 
number of operands: 1 
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N386 ) - (int V_598) -> (GeneralNode N387 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 %134, i8* %23, align 1, !tbaa !1282
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i8 0, i8* %24, align 1, !tbaa !1283
number of operands: 2 
-----operand1: --------
  ConstantInt-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %135 = xor i1 %131, true
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %131 = icmp eq i32 %125, 0
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %131 = icmp eq i32 %125, 0
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N389 ) - (int V_599 = V_595^-1) -> (GeneralNode N390 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %136 = icmp eq i8 %134, 0
-------instruction type-------
  Integer-type 
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %134 = trunc i32 %133 to i8
-----operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N390 ) - (int V_600 = V_598=0) -> (GeneralNode N391 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %137 = and i1 %136, %135
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %136 = icmp eq i8 %134, 0
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %136 = icmp eq i8 %134, 0
-----create from arithmetic op -> operand2: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N391 ) - (int V_601 = V_600&V_599) -> (GeneralNode N392 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %138 = select i1 %137, i64 -77, i64 6 
-------instruction type-------  Integer-type 
number of operands: 3 
-----select condition: --------
  Instruction-value 
  Integer-type 
-----branch destination1: --------
  ConstantInt-value 
  Integer-type 
-----des1: i64 -77
-----branch destination2: --------
  ConstantInt-value 
  Integer-type 
-----des2: i64 6
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: AssumeEdge: (GeneralNode N392 ) - (1=V_601) -> (GeneralNode N419 )
tcfa: AssumeEdge: (GeneralNode N392 ) - (not 1=V_601) -> (GeneralNode N420 )
tcfa: DeclarationEdge: (GeneralNode N419 ) - (int V_602 = -77) -> (GeneralNode N393 )
tcfa: DeclarationEdge: (GeneralNode N420 ) - (int V_602 = -77) -> (GeneralNode N393 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %139 = add i64 %120, %138
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %120 = phi i64 [ %31, %block_400509 ], [ %144, %block_400562 ]
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %120 = phi i64 [ %31, %block_400509 ], [ %144, %block_400562 ]
-----create from arithmetic op -> operand2: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N393 ) - (int V_562) -> (GeneralNode N394 )
-----------------------------;
instruction value kind: 
  Instruction-value 
Terminator instruction:   br i1 %137, label %block_400519, label %block_40056c
number of operands: 3 
instr: 
Instruction:   br i1 %137, label %block_400519, label %block_40056c
number of operands: 3 
-----branch condition: --------
  Instruction-value 
  Integer-type 
-----branch destination1: --------
  BasicBlock-value 
  Label-type 
-----des1: 
block_40056c:                                     ; preds = %block_400566
  %87 = inttoptr i64 %121 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %13, align 8, !tbaa !1261
  %89 = add i64 %121, 8
  %90 = inttoptr i64 %89 to i64*
  %91 = load i64, i64* %90
  store i64 %91, i64* %3, align 8, !tbaa !1261
  %92 = add i64 %121, 16
  store i64 %92, i64* %12, align 8, !tbaa !1261
  ret %struct.Memory* %122

-----branch destination2: --------
  BasicBlock-value 
  Label-type 
-----des2: 
block_400519:                                     ; preds = %block_400566
  %93 = add i64 %139, -66
  %94 = add i64 %139, 10
  %95 = load i64, i64* %12, align 8, !tbaa !1261
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %94, i64* %97
  store i64 %96, i64* %12, align 8, !tbaa !1261
  %98 = tail call %struct.Memory* @sub_4004d7_recv(%struct.State* nonnull %0, i64 %93, %struct.Memory* %122)
  %99 = load i64, i64* %13, align 8
  %100 = add i64 %99, -12
  %101 = load i32, i32* %5, align 4
  %102 = load i64, i64* %3, align 8
  %103 = inttoptr i64 %100 to i32*
  store i32 %101, i32* %103
  %104 = inttoptr i64 %100 to i32*
  %105 = load i32, i32* %104
  store i8 0, i8* %19, align 1, !tbaa !1265
  %106 = and i32 %105, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #6
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %20, align 1, !tbaa !1279
  store i8 0, i8* %21, align 1, !tbaa !1280
  %111 = icmp eq i32 %105, 0
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %22, align 1, !tbaa !1281
  %113 = lshr i32 %105, 31
  %114 = trunc i32 %113 to i8
  store i8 %114, i8* %23, align 1, !tbaa !1282
  store i8 0, i8* %24, align 1, !tbaa !1283
  %115 = icmp ne i8 %114, 0
  %116 = or i1 %111, %115
  %117 = select i1 %116, i64 53, i64 9
  %118 = add i64 %102, %117
  %119 = zext i32 %105 to i64
  store i64 %119, i64* %10, align 8, !tbaa !1261
  store i64 %119, i64* %11, align 8, !tbaa !1261
  br i1 %116, label %block_400558, label %block_40052c

----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: AssumeEdge: (GeneralNode N394 ) - (1=V_601) -> (GeneralNode N316 )
tcfa: AssumeEdge: (GeneralNode N394 ) - (not 1=V_601) -> (GeneralNode N327 )
Instructions for block:
 -----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %140 = phi i64 [ %60, %block_400558 ], [ %86, %block_40052c ], [ %53, %block_40053f ] 
-------instruction type-------
  Integer-type 
number of operands: 3 
-----operand 0: --------
-----opr0:   %60 = load i64, i64* %3, align 8
  Instruction-value 
  Integer-type 
-----operand 1: --------
-----opr 1:   %86 = add i64 %70, %85
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N396 ) - (int V_603) -> (GeneralNode N397 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instruction: 
   %141 = phi %struct.Memory* [ %59, %block_400558 ], [ %66, %block_40052c ], [ %51, %block_40053f ] 
-------instruction type-------
  Pointer to :  Stuct-type 
number of operands: 3 
-----operand 0: --------
-----opr0:   %59 = tail call %struct.Memory* @sub_4004ff_log(%struct.State* nonnull %0, i64 %54, %struct.Memory* %98)
  Instruction-value 
  Pointer to :  Stuct-type 
-----operand 1: --------
-----opr 1:   %66 = tail call %struct.Memory* @sub_4004f3_check(%struct.State* nonnull %0, i64 %61, %struct.Memory* %98)
  Instruction-value 
  Pointer to :  Stuct-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Stuct-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N397 ) - (struct struct.Memory{

} struct.Memory* V_604) -> (GeneralNode N398 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %142 = load i64, i64* %13, align 8
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N398 ) - (int V_605 = V_483) -> (GeneralNode N399 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %143 = add i64 %142, -20
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %142 = load i64, i64* %13, align 8
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %142 = load i64, i64* %13, align 8
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N399 ) - (int V_606 = V_605+-20) -> (GeneralNode N400 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %144 = add i64 %140, 4
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %140 = phi i64 [ %60, %block_400558 ], [ %86, %block_40052c ], [ %53, %block_40053f ]
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %140 = phi i64 [ %60, %block_400558 ], [ %86, %block_40052c ], [ %53, %block_40053f ]
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N400 ) - (int V_607 = V_603+4) -> (GeneralNode N401 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %145 = inttoptr i64 %143 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %143 = add i64 %142, -20
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N401 ) - (int* V_608 = (int*)V_606) -> (GeneralNode N402 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Load instruction:   %146 = load i32, i32* %145
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 1 
-------operand value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N402 ) - (int V_609 = V_608) -> (GeneralNode N403 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %147 = add i32 %146, -1
-------instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
number of operands: 2 
-----operand1: --------
opr1:   %146 = load i32, i32* %145
  Instruction-value 
  Integer-type 
-----operand2: --------
  ConstantInt-value 
  Integer-type 
-----create from arithmetic op -> operand1: --------
  Instruction-value 
  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 opr1:   %146 = load i32, i32* %145
-----create from arithmetic op -> operand2: --------
  ConstantInt-value 
  Integer-type 
tcfa: DeclarationEdge: (GeneralNode N403 ) - (int V_610 = V_609+-1) -> (GeneralNode N404 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Instruction:   %148 = inttoptr i64 %143 to i32*
-------instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
number of operands: 1 
-----operand1: --------
opr1:   %143 = add i64 %142, -20
  Instruction-value 
  Integer-type 
-----operand2: --------
  Argument-value 
  Void-type 
number of operands: 1 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 tcfa: DeclarationEdge: (GeneralNode N404 ) - (int* V_611 = (int*)V_606) -> (GeneralNode N405 )
-----------------------------;
instruction value kind: 
  Instruction-value 
instr: 
Store instruction:   store i32 %147, i32* %148
number of operands: 2 
-----operand1: --------
  Instruction-value 
  Integer-type 
-----operand2: --------
  Instruction-value 
  Pointer to :  Integer-type 
----operand instruction value kind and type kind-------
  Instruction-value 
  Integer-type 
----function name:  -----
 ----operand instruction value kind and type kind-------
  Instruction-value 
  Pointer to :  Integer-type 
----function name:  -----
 -----------------------------;
instruction value kind: 
  Instruction-value 
Terminator instruction:   br label %block_400566
number of operands: 1 
instr: 
Instruction:   br label %block_400566
number of operands: 1 
-----branch destination: --------
  BasicBlock-value 
  Label-type 
2 -> BlankEdge: (FunctionEntryNode N4 ) -> (GeneralNode N5 )
86 -> ReturnStatementEdge: (GeneralNode N78 ) - (returnparam_V_208) -> (FunctionExitNode N15 )
43 -> DeclarationEdge: (GeneralNode N49 ) - (int* V_152 = (int*)V_144) -> (GeneralNode N50 )
29 -> DeclarationEdge: (GeneralNode N39 ) - (int V_145 = V_144+-8) -> (GeneralNode N40 )
238 -> StatementEdge: (GeneralNode N178 ) - (V_407 = V_424) -> (GeneralNode N179 )
336 -> DeclarationEdge: (GeneralNode N238 ) - (int V_504 = V_503+-85) -> (GeneralNode N239 )
35 -> DeclarationEdge: (GeneralNode N43 ) - (int V_148 = V_142) -> (GeneralNode N44 )
363 -> StatementEdge: (GeneralNode N256 ) - (V_481 = V_516) -> (GeneralNode N257 )
177 -> DeclarationEdge: (GeneralNode N136 ) - (int* V_357) -> (GeneralNode N137 )
447 -> DeclarationEdge: (GeneralNode N308 ) - (int V_550) -> (GeneralNode N309 )
469 -> DeclarationEdge: (GeneralNode N321 ) - (int* V_558 = (int*)V_557) -> (GeneralNode N322 )
324 -> StatementEdge: (GeneralNode N230 ) - (V_497 = V_496) -> (GeneralNode N231 )
287 -> DeclarationEdge: (GeneralNode N208 ) - (int* V_479 = (int*)V_478) -> (GeneralNode N209 )
597 -> DeclarationEdge: (GeneralNode N404 ) - (int* V_611 = (int*)V_606) -> (GeneralNode N405 )
533 -> DeclarationEdge: (GeneralNode N362 ) - (int V_524) -> (GeneralNode N363 )
253 -> FunctionReturnEdge: (FunctionExitNode N30 ) - (FunctionSummaryEdge: (GeneralNode N187 ) - ("sub_400509_C2"(): ) -> (GeneralNode N200 )) -> (GeneralNode N200 )
115 -> StatementEdge: (GeneralNode N96 ) - (V_248 = V_257) -> (GeneralNode N97 )
538 -> AssumeEdge: (GeneralNode N366 ) - (not 1=V_584) -> (GeneralNode N268 )
232 -> DeclarationEdge: (GeneralNode N173 ) - (int V_421) -> (GeneralNode N174 )
149 -> DeclarationEdge: (GeneralNode N117 ) - (int V_309 = V_299) -> (GeneralNode N118 )
95 -> DeclarationEdge: (GeneralNode N82 ) - (int* V_246 = (int*)V_245) -> (GeneralNode N83 )
486 -> StatementEdge: (GeneralNode N333 ) - (V_567 = V_564) -> (GeneralNode N334 )
283 -> DeclarationEdge: (GeneralNode N206 ) - (int* V_477 = (int*)V_476) -> (GeneralNode N207 )
41 -> StatementEdge: (GeneralNode N48 ) - (V_141 = V_151) -> (GeneralNode N49 )
547 -> DeclarationEdge: (GeneralNode N373 ) - (int V_590 = V_589) -> (GeneralNode N374 )
461 -> BlankEdge: (GeneralNode N316 ) -> (GeneralNode N317 )
327 -> DeclarationEdge: (GeneralNode N232 ) - (int V_499 = V_477) -> (GeneralNode N233 )
248 -> DeclarationEdge: (GeneralNode N184 ) - (int* V_429 = (int*)V_428) -> (GeneralNode N185 )
265 -> DeclarationEdge: (GeneralNode N195 ) - (int V_435 = V_434) -> (GeneralNode N196 )
252 -> FunctionCallEdge: (GeneralNode N187 ) - ("sub_400509_C2"(): FunctionSummaryEdge: (GeneralNode N187 ) - ("sub_400509_C2"(): ) -> (GeneralNode N200 )) -> (FunctionEntryNode N28 )
368 -> DeclarationEdge: (GeneralNode N259 ) - (int V_519 = V_482) -> (GeneralNode N260 )
567 -> DeclarationEdge: (GeneralNode N386 ) - (int V_598) -> (GeneralNode N387 )
37 -> StatementEdge: (GeneralNode N45 ) - (V_139 = V_149) -> (GeneralNode N46 )
114 -> DeclarationEdge: (GeneralNode N95 ) - (int V_257 = V_256) -> (GeneralNode N96 )
99 -> DeclarationEdge: (GeneralNode N84 ) - (int* V_248 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_243+0) -> (GeneralNode N85 )
510 -> DeclarationEdge: (GeneralNode N347 ) - (int V_576) -> (GeneralNode N348 )
230 -> DeclarationEdge: (GeneralNode N171 ) - (int V_419 = (int)V_414) -> (GeneralNode N172 )
163 -> DeclarationEdge: (GeneralNode N128 ) - (int V_316 = V_305+8) -> (GeneralNode N129 )
516 -> StatementEdge: (GeneralNode N351 ) - (V_491 = 0) -> (GeneralNode N352 )
97 -> DeclarationEdge: (GeneralNode N83 ) - (int* V_247 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_243+0) -> (GeneralNode N84 )
408 -> DeclarationEdge: (GeneralNode N283 ) - (int V_534 = V_533+-8) -> (GeneralNode N284 )
91 -> DeclarationEdge: (GeneralNode N80 ) - (int* V_244 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_243+0) -> (GeneralNode N81 )
373 -> StatementEdge: (GeneralNode N262 ) - (V_521 = V_518) -> (GeneralNode N263 )
73 -> DeclarationEdge: (GeneralNode N68 ) - (int V_202 = V_193) -> (GeneralNode N69 )
47 -> DeclarationEdge: (GeneralNode N52 ) - (int V_154 = V_144+8) -> (GeneralNode N53 )
218 -> DeclarationEdge: (GeneralNode N162 ) - (int* V_412 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N163 )
191 -> DeclarationEdge: (GeneralNode N146 ) - (int* V_365 = (int*)V_360) -> (GeneralNode N147 )
586 -> DeclarationEdge: (GeneralNode N398 ) - (int V_605 = V_483) -> (GeneralNode N399 )
372 -> DeclarationEdge: (GeneralNode N261 ) - (int* V_521 = (int*)V_520) -> (GeneralNode N262 )
240 -> StatementEdge: (GeneralNode N180 ) - (V_410 = V_424) -> (GeneralNode N181 )
455 -> DeclarationEdge: (GeneralNode N412 ) - (int V_553 = 44) -> (GeneralNode N314 )
260 -> StatementEdge: (GeneralNode N192 ) - (V_412 = V_432) -> (GeneralNode N193 )
442 -> DeclarationEdge: (GeneralNode N304 ) - (int V_547 = V_542=0) -> (GeneralNode N305 )
293 -> DeclarationEdge: (GeneralNode N211 ) - (int* V_482 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N212 )
524 -> StatementEdge: (GeneralNode N358 ) - (V_494 = 0) -> (GeneralNode N359 )
536 -> StatementEdge: (GeneralNode N365 ) - (V_481 = V_586) -> (GeneralNode N366 )
139 -> DeclarationEdge: (GeneralNode N110 ) - (int* V_303) -> (GeneralNode N111 )
494 -> DeclarationEdge: (GeneralNode N337 ) - (int V_569 = V_568+-12) -> (GeneralNode N338 )
362 -> StatementEdge: (GeneralNode N255 ) - (V_480 = V_516) -> (GeneralNode N256 )
48 -> StatementEdge: (GeneralNode N53 ) - (V_140 = V_154) -> (GeneralNode N54 )
123 -> ReturnStatementEdge: (GeneralNode N102 ) - (returnparam_V_261) -> (FunctionExitNode N18 )
255 -> StatementEdge: (GeneralNode N188 ) - (V_407 = 0) -> (GeneralNode N189 )
178 -> DeclarationEdge: (GeneralNode N137 ) - (int V_358 = V_356) -> (GeneralNode N138 )
74 -> StatementEdge: (GeneralNode N69 ) - (V_196 = V_202) -> (GeneralNode N70 )
505 -> DeclarationEdge: (GeneralNode N345 ) - (int V_575 = V_574&255) -> (GeneralNode N346 )
495 -> DeclarationEdge: (GeneralNode N338 ) - (int V_570 = V_475) -> (GeneralNode N339 )
170 -> DeclarationEdge: (GeneralNode N132 ) - (int* V_353 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_352+0) -> (GeneralNode N133 )
58 -> DeclarationEdge: (GeneralNode N58 ) - (int* V_193 = (int*)V_192) -> (GeneralNode N59 )
584 -> DeclarationEdge: (GeneralNode N396 ) - (int V_603) -> (GeneralNode N397 )
531 -> DeclarationEdge: (GeneralNode N417 ) - (int V_585 = 53) -> (GeneralNode N362 )
522 -> DeclarationEdge: (GeneralNode N356 ) - (int V_582) -> (GeneralNode N357 )
471 -> StatementEdge: (GeneralNode N323 ) - (V_473 = V_559) -> (GeneralNode N324 )
374 -> StatementEdge: (GeneralNode N263 ) - (V_482 = V_520) -> (GeneralNode N264 )
256 -> DeclarationEdge: (GeneralNode N189 ) - (int V_430 = V_412) -> (GeneralNode N190 )
138 -> DeclarationEdge: (GeneralNode N109 ) - (int* V_302 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N110 )
113 -> DeclarationEdge: (GeneralNode N94 ) - (int* V_256 = (int*)V_252) -> (GeneralNode N95 )
575 -> AssumeEdge: (GeneralNode N392 ) - (1=V_601) -> (GeneralNode N419 )
595 -> DeclarationEdge: (GeneralNode N403 ) - (int V_610 = V_609+-1) -> (GeneralNode N404 )
406 -> DeclarationEdge: (GeneralNode N282 ) - (int V_533 = V_482) -> (GeneralNode N283 )
348 -> FunctionReturnEdge: (FunctionExitNode N24 ) - (FunctionSummaryEdge: (GeneralNode N245 ) - ("sub_4004ea_constructReply"(): ) -> (GeneralNode N407 )) -> (GeneralNode N407 )
151 -> DeclarationEdge: (GeneralNode N119 ) - (int V_310 = V_303) -> (GeneralNode N120 )
530 -> DeclarationEdge: (GeneralNode N416 ) - (int V_585 = 53) -> (GeneralNode N362 )
592 -> DeclarationEdge: (GeneralNode N401 ) - (int* V_608 = (int*)V_606) -> (GeneralNode N402 )
483 -> DeclarationEdge: (GeneralNode N331 ) - (int V_566 = V_565+-8) -> (GeneralNode N332 )
467 -> DeclarationEdge: (GeneralNode N320 ) - (int V_557 = V_554+8) -> (GeneralNode N321 )
410 -> DeclarationEdge: (GeneralNode N284 ) - (int* V_535 = (int*)V_534) -> (GeneralNode N285 )
383 -> BlankEdge: (GeneralNode N268 ) -> (GeneralNode N269 )
308 -> DeclarationEdge: (GeneralNode N221 ) - (int* V_489 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N222 )
155 -> DeclarationEdge: (GeneralNode N122 ) - (int* V_312 = (int*)V_306) -> (GeneralNode N123 )
6 -> BlankEdge: (FunctionEntryNode N16 ) -> (GeneralNode N17 )
401 -> BlankEdge: (GeneralNode N279 ) -> (GeneralNode N280 )
314 -> DeclarationEdge: (GeneralNode N224 ) - (int* V_492 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N225 )
196 -> DeclarationEdge: (GeneralNode N150 ) - (int V_368 = V_367) -> (GeneralNode N151 )
321 -> DeclarationEdge: (GeneralNode N228 ) - (int V_496 = V_479) -> (GeneralNode N229 )
165 -> ReturnStatementEdge: (GeneralNode N130 ) - (returnparam_V_317) -> (FunctionExitNode N21 )
527 -> DeclarationEdge: (GeneralNode N360 ) - (int V_584 = V_579|V_583) -> (GeneralNode N361 )
345 -> StatementEdge: (GeneralNode N244 ) - (V_482 = V_507) -> (GeneralNode N245 )
339 -> DeclarationEdge: (GeneralNode N240 ) - (int V_506 = V_482) -> (GeneralNode N241 )
193 -> StatementEdge: (GeneralNode N148 ) - (V_356 = V_366) -> (GeneralNode N149 )
110 -> DeclarationEdge: (GeneralNode N92 ) - (int V_255 = V_246) -> (GeneralNode N93 )
132 -> DeclarationEdge: (GeneralNode N106 ) - (int* V_299 = (int*)V_298) -> (GeneralNode N107 )
67 -> DeclarationEdge: (GeneralNode N64 ) - (int V_199 = V_198+-8) -> (GeneralNode N65 )
599 -> BlankEdge: (GeneralNode N406 ) -> (GeneralNode N367 )
598 -> StatementEdge: (GeneralNode N405 ) - (V_611 = V_610) -> (GeneralNode N406 )
210 -> DeclarationEdge: (GeneralNode N158 ) - (int* V_408 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N159 )
40 -> DeclarationEdge: (GeneralNode N47 ) - (int V_151 = V_150) -> (GeneralNode N48 )
388 -> DeclarationEdge: (GeneralNode N271 ) - (int V_527 = V_482) -> (GeneralNode N272 )
268 -> DeclarationEdge: (GeneralNode N197 ) - (int V_436 = V_430+16) -> (GeneralNode N198 )
582 -> AssumeEdge: (GeneralNode N394 ) - (not 1=V_601) -> (GeneralNode N327 )
316 -> DeclarationEdge: (GeneralNode N225 ) - (int* V_493 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N226 )
249 -> StatementEdge: (GeneralNode N185 ) - (V_429 = V_427) -> (GeneralNode N186 )
473 -> DeclarationEdge: (GeneralNode N324 ) - (int V_560 = V_554+16) -> (GeneralNode N325 )
390 -> DeclarationEdge: (GeneralNode N272 ) - (int V_528 = V_527+-8) -> (GeneralNode N273 )
146 -> StatementEdge: (GeneralNode N115 ) - (V_307 = V_304) -> (GeneralNode N116 )
517 -> DeclarationEdge: (GeneralNode N352 ) - (int V_579 = V_574=0) -> (GeneralNode N353 )
375 -> FunctionSummaryEdge: (GeneralNode N264 ) - ("sub_4004e0_send"(): ) -> (GeneralNode N408 )
347 -> FunctionCallEdge: (GeneralNode N245 ) - ("sub_4004ea_constructReply"(): FunctionSummaryEdge: (GeneralNode N245 ) - ("sub_4004ea_constructReply"(): ) -> (GeneralNode N407 )) -> (FunctionEntryNode N22 )
312 -> DeclarationEdge: (GeneralNode N223 ) - (int* V_491 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N224 )
107 -> StatementEdge: (GeneralNode N90 ) - (V_253 = V_250) -> (GeneralNode N91 )
51 -> BlankEdge: (GeneralNode N55 ) -> (FunctionExitNode N15 )
518 -> DeclarationEdge: (GeneralNode N353 ) - (int V_580) -> (GeneralNode N354 )
552 -> FunctionCallEdge: (GeneralNode N376 ) - ("llvm.ctpop.i32"(): FunctionSummaryEdge: (GeneralNode N376 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N418 )) -> (FunctionEntryNode N7 )
344 -> StatementEdge: (GeneralNode N243 ) - (V_508 = V_505) -> (GeneralNode N244 )
220 -> DeclarationEdge: (GeneralNode N164 ) - (int* V_414) -> (GeneralNode N165 )
13 -> BlankEdge: (GeneralNode N8 ) -> (FunctionExitNode N9 )
450 -> DeclarationEdge: (GeneralNode N311 ) - (int V_551 = V_550!=0) -> (GeneralNode N312 )
420 -> DeclarationEdge: (GeneralNode N290 ) - (int V_538 = V_475) -> (GeneralNode N291 )
9 -> BlankEdge: (FunctionEntryNode N25 ) -> (GeneralNode N26 )
202 -> BlankEdge: (GeneralNode N26 ) -> (GeneralNode N155 )
535 -> StatementEdge: (GeneralNode N364 ) - (V_480 = V_586) -> (GeneralNode N365 )
485 -> DeclarationEdge: (GeneralNode N332 ) - (int* V_567 = (int*)V_566) -> (GeneralNode N333 )
11 -> BlankEdge: (GeneralNode N8 ) -> (FunctionExitNode N9 )
214 -> DeclarationEdge: (GeneralNode N160 ) - (int* V_410 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N161 )
299 -> DeclarationEdge: (GeneralNode N215 ) - (int V_486 = V_485+-8) -> (GeneralNode N216 )
529 -> AssumeEdge: (GeneralNode N361 ) - (not 1=V_584) -> (GeneralNode N417 )
566 -> DeclarationEdge: (GeneralNode N385 ) - (int V_597 = V_590>>31) -> (GeneralNode N386 )
360 -> DeclarationEdge: (GeneralNode N253 ) - (int V_515 = V_514) -> (GeneralNode N254 )
421 -> DeclarationEdge: (GeneralNode N291 ) - (int V_539 = V_473) -> (GeneralNode N292 )
156 -> DeclarationEdge: (GeneralNode N123 ) - (int V_313 = V_312) -> (GeneralNode N124 )
197 -> StatementEdge: (GeneralNode N151 ) - (V_353 = V_368) -> (GeneralNode N152 )
507 -> FunctionCallEdge: (GeneralNode N346 ) - ("llvm.ctpop.i32"(): FunctionSummaryEdge: (GeneralNode N346 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N415 )) -> (FunctionEntryNode N7 )
415 -> FunctionReturnEdge: (FunctionExitNode N21 ) - (FunctionSummaryEdge: (GeneralNode N287 ) - ("sub_4004f3_check"(): ) -> (GeneralNode N410 )) -> (GeneralNode N410 )
76 -> DeclarationEdge: (GeneralNode N70 ) - (int* V_203 = (int*)V_199) -> (GeneralNode N71 )
393 -> StatementEdge: (GeneralNode N274 ) - (V_529 = V_526) -> (GeneralNode N275 )
167 -> BlankEdge: (GeneralNode N131 ) -> (FunctionExitNode N24 )
109 -> DeclarationEdge: (GeneralNode N91 ) - (int V_254 = (int)V_249) -> (GeneralNode N92 )
24 -> DeclarationEdge: (GeneralNode N35 ) - (int* V_141 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_137+0) -> (GeneralNode N36 )
509 -> BlankEdge: (GeneralNode N415 ) -> (GeneralNode N347 )
399 -> DeclarationEdge: (GeneralNode N277 ) - (int V_530 = V_473) -> (GeneralNode N278 )
134 -> DeclarationEdge: (GeneralNode N107 ) - (int* V_300 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N108 )
70 -> StatementEdge: (GeneralNode N66 ) - (V_200 = V_197) -> (GeneralNode N67 )
273 -> BlankEdge: (GeneralNode N201 ) -> (GeneralNode N202 )
572 -> DeclarationEdge: (GeneralNode N390 ) - (int V_600 = V_598=0) -> (GeneralNode N391 )
411 -> StatementEdge: (GeneralNode N285 ) - (V_535 = V_532) -> (GeneralNode N286 )
285 -> DeclarationEdge: (GeneralNode N207 ) - (struct union.anon{
int i64;
} union.anon* V_478 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N208 )
356 -> DeclarationEdge: (GeneralNode N250 ) - (int* V_513 = (int*)V_510) -> (GeneralNode N251 )
236 -> DeclarationEdge: (GeneralNode N176 ) - (int V_423 = V_413) -> (GeneralNode N177 )
128 -> DeclarationEdge: (GeneralNode N104 ) - (int* V_297 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N105 )
81 -> DeclarationEdge: (GeneralNode N74 ) - (int V_206 = V_205) -> (GeneralNode N75 )
303 -> StatementEdge: (GeneralNode N218 ) - (V_483 = V_486) -> (GeneralNode N219 )
118 -> DeclarationEdge: (GeneralNode N98 ) - (int V_259 = V_258) -> (GeneralNode N99 )
476 -> BlankEdge: (GeneralNode N327 ) -> (GeneralNode N328 )
78 -> StatementEdge: (GeneralNode N72 ) - (V_195 = V_204) -> (GeneralNode N73 )
45 -> StatementEdge: (GeneralNode N51 ) - (V_138 = V_153) -> (GeneralNode N52 )
396 -> FunctionCallEdge: (GeneralNode N276 ) - ("sub_4004ff_log"(): FunctionSummaryEdge: (GeneralNode N276 ) - ("sub_4004ff_log"(): ) -> (GeneralNode N409 )) -> (FunctionEntryNode N16 )
203 -> BlankEdge: (GeneralNode N155 ) -> (FunctionExitNode N27 )
346 -> FunctionSummaryEdge: (GeneralNode N245 ) - ("sub_4004ea_constructReply"(): ) -> (GeneralNode N407 )
590 -> DeclarationEdge: (GeneralNode N400 ) - (int V_607 = V_603+4) -> (GeneralNode N401 )
574 -> DeclarationEdge: (GeneralNode N391 ) - (int V_601 = V_600&V_599) -> (GeneralNode N392 )
201 -> ReturnStatementEdge: (GeneralNode N154 ) - (returnparam_V_370) -> (FunctionExitNode N24 )
69 -> DeclarationEdge: (GeneralNode N65 ) - (int* V_200 = (int*)V_199) -> (GeneralNode N66 )
101 -> DeclarationEdge: (GeneralNode N86 ) - (int V_250 = V_248) -> (GeneralNode N87 )
12 -> BlankEdge: (GeneralNode N8 ) -> (FunctionExitNode N9 )
554 -> BlankEdge: (GeneralNode N418 ) -> (GeneralNode N377 )
31 -> DeclarationEdge: (GeneralNode N40 ) - (int* V_146 = (int*)V_145) -> (GeneralNode N41 )
341 -> DeclarationEdge: (GeneralNode N241 ) - (int V_507 = V_506+-8) -> (GeneralNode N242 )
164 -> StatementEdge: (GeneralNode N129 ) - (V_301 = V_316) -> (GeneralNode N130 )
443 -> DeclarationEdge: (GeneralNode N305 ) - (int V_548) -> (GeneralNode N306 )
270 -> ReturnStatementEdge: (GeneralNode N199 ) - (returnV_437) -> (FunctionExitNode N27 )
534 -> DeclarationEdge: (GeneralNode N363 ) - (int V_586) -> (GeneralNode N364 )
470 -> DeclarationEdge: (GeneralNode N322 ) - (int V_559 = V_558) -> (GeneralNode N323 )
56 -> DeclarationEdge: (GeneralNode N57 ) - (struct union.anon{
int i64;
} union.anon* V_192 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_190+0) -> (GeneralNode N58 )
291 -> DeclarationEdge: (GeneralNode N210 ) - (int* V_481 = i64.V_478+0) -> (GeneralNode N211 )
89 -> BlankEdge: (GeneralNode N79 ) -> (GeneralNode N80 )
578 -> DeclarationEdge: (GeneralNode N420 ) - (int V_602 = -77) -> (GeneralNode N393 )
487 -> StatementEdge: (GeneralNode N334 ) - (V_482 = V_566) -> (GeneralNode N335 )
82 -> StatementEdge: (GeneralNode N75 ) - (V_191 = V_206) -> (GeneralNode N76 )
277 -> DeclarationEdge: (GeneralNode N203 ) - (struct union.anon{
int i64;
} union.anon* V_474 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N204 )
551 -> FunctionSummaryEdge: (GeneralNode N376 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N418 )
266 -> StatementEdge: (GeneralNode N196 ) - (V_406 = V_435) -> (GeneralNode N197 )
111 -> StatementEdge: (GeneralNode N93 ) - (V_249 = V_255) -> (GeneralNode N94 )
14 -> BlankEdge: (GeneralNode N11 ) -> (GeneralNode N31 )
446 -> DeclarationEdge: (GeneralNode N307 ) - (int V_549 = V_542>>31) -> (GeneralNode N308 )
206 -> DeclarationEdge: (GeneralNode N156 ) - (int* V_406 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N157 )
106 -> DeclarationEdge: (GeneralNode N89 ) - (int* V_253 = (int*)V_252) -> (GeneralNode N90 )
62 -> DeclarationEdge: (GeneralNode N60 ) - (int* V_195 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_190+0) -> (GeneralNode N61 )
250 -> StatementEdge: (GeneralNode N186 ) - (V_411 = V_428) -> (GeneralNode N187 )
333 -> BlankEdge: (GeneralNode N236 ) -> (GeneralNode N367 )
200 -> StatementEdge: (GeneralNode N153 ) - (V_355 = V_369) -> (GeneralNode N154 )
491 -> BlankEdge: (GeneralNode N414 ) -> (GeneralNode N336 )
52 -> BlankEdge: (GeneralNode N55 ) -> (GeneralNode N56 )
49 -> ReturnStatementEdge: (GeneralNode N54 ) - (returnparam_V_155) -> (FunctionExitNode N12 )
25 -> DeclarationEdge: (GeneralNode N36 ) - (int* V_142) -> (GeneralNode N37 )
310 -> DeclarationEdge: (GeneralNode N222 ) - (int* V_490 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N223 )
130 -> DeclarationEdge: (GeneralNode N105 ) - (struct union.anon{
int i64;
} union.anon* V_298 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N106 )
376 -> FunctionCallEdge: (GeneralNode N264 ) - ("sub_4004e0_send"(): FunctionSummaryEdge: (GeneralNode N264 ) - ("sub_4004e0_send"(): ) -> (GeneralNode N408 )) -> (FunctionEntryNode N13 )
166 -> BlankEdge: (GeneralNode N23 ) -> (GeneralNode N131 )
577 -> DeclarationEdge: (GeneralNode N419 ) - (int V_602 = -77) -> (GeneralNode N393 )
397 -> FunctionReturnEdge: (FunctionExitNode N18 ) - (FunctionSummaryEdge: (GeneralNode N276 ) - ("sub_4004ff_log"(): ) -> (GeneralNode N409 )) -> (GeneralNode N409 )
492 -> DeclarationEdge: (GeneralNode N336 ) - (int V_568 = V_483) -> (GeneralNode N337 )
352 -> DeclarationEdge: (GeneralNode N247 ) - (int V_510 = V_509+-4) -> (GeneralNode N248 )
20 -> DeclarationEdge: (GeneralNode N33 ) - (int* V_139 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_137+0) -> (GeneralNode N34 )
350 -> DeclarationEdge: (GeneralNode N246 ) - (int V_509 = V_483) -> (GeneralNode N247 )
329 -> DeclarationEdge: (GeneralNode N233 ) - (int* V_500 = (int*)V_498) -> (GeneralNode N234 )
179 -> DeclarationEdge: (GeneralNode N138 ) - (int V_359 = V_355) -> (GeneralNode N139 )
126 -> BlankEdge: (GeneralNode N103 ) -> (GeneralNode N104 )
367 -> DeclarationEdge: (GeneralNode N258 ) - (int V_518 = V_512+13) -> (GeneralNode N259 )
583 -> BlankEdge: (GeneralNode N395 ) -> (GeneralNode N396 )
498 -> DeclarationEdge: (GeneralNode N340 ) - (int* V_572 = (int*)V_569) -> (GeneralNode N341 )
174 -> DeclarationEdge: (GeneralNode N134 ) - (int* V_355 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_352+0) -> (GeneralNode N135 )
501 -> DeclarationEdge: (GeneralNode N342 ) - (int* V_573 = (int*)V_569) -> (GeneralNode N343 )
398 -> BlankEdge: (GeneralNode N409 ) -> (GeneralNode N277 )
88 -> BlankEdge: (GeneralNode N79 ) -> (FunctionExitNode N18 )
7 -> BlankEdge: (FunctionEntryNode N19 ) -> (GeneralNode N20 )
456 -> DeclarationEdge: (GeneralNode N413 ) - (int V_553 = 44) -> (GeneralNode N314 )
387 -> DeclarationEdge: (GeneralNode N270 ) - (int V_526 = V_524+10) -> (GeneralNode N271 )
39 -> DeclarationEdge: (GeneralNode N46 ) - (int* V_150 = (int*)V_145) -> (GeneralNode N47 )
153 -> StatementEdge: (GeneralNode N121 ) - (V_300 = V_311) -> (GeneralNode N122 )
417 -> DeclarationEdge: (GeneralNode N288 ) - (int V_536 = V_483) -> (GeneralNode N289 )
254 -> BlankEdge: (GeneralNode N200 ) -> (GeneralNode N188 )
136 -> DeclarationEdge: (GeneralNode N108 ) - (int* V_301 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N109 )
361 -> DeclarationEdge: (GeneralNode N254 ) - (int V_516) -> (GeneralNode N255 )
571 -> DeclarationEdge: (GeneralNode N389 ) - (int V_599 = V_595^-1) -> (GeneralNode N390 )
540 -> DeclarationEdge: (GeneralNode N368 ) - (int V_587) -> (GeneralNode N369 )
224 -> DeclarationEdge: (GeneralNode N167 ) - (int V_417 = V_416+-8) -> (GeneralNode N168 )
10 -> BlankEdge: (FunctionEntryNode N28 ) -> (GeneralNode N29 )
233 -> StatementEdge: (GeneralNode N174 ) - (V_408 = V_421) -> (GeneralNode N175 )
593 -> DeclarationEdge: (GeneralNode N402 ) - (int V_609 = V_608) -> (GeneralNode N403 )
338 -> DeclarationEdge: (GeneralNode N239 ) - (int V_505 = V_503+10) -> (GeneralNode N240 )
119 -> StatementEdge: (GeneralNode N99 ) - (V_244 = V_259) -> (GeneralNode N100 )
93 -> DeclarationEdge: (GeneralNode N81 ) - (struct union.anon{
int i64;
} union.anon* V_245 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_243+0) -> (GeneralNode N82 )
564 -> StatementEdge: (GeneralNode N384 ) - (V_492 = V_596) -> (GeneralNode N385 )
394 -> StatementEdge: (GeneralNode N275 ) - (V_482 = V_528) -> (GeneralNode N276 )
64 -> DeclarationEdge: (GeneralNode N62 ) - (int V_197 = V_195) -> (GeneralNode N63 )
539 -> BlankEdge: (GeneralNode N367 ) -> (GeneralNode N368 )
72 -> DeclarationEdge: (GeneralNode N67 ) - (int V_201 = (int)V_196) -> (GeneralNode N68 )
424 -> StatementEdge: (GeneralNode N293 ) - (V_540 = V_538) -> (GeneralNode N294 )
365 -> DeclarationEdge: (GeneralNode N257 ) - (int V_517 = V_512+-105) -> (GeneralNode N258 )
184 -> StatementEdge: (GeneralNode N141 ) - (V_361 = V_358) -> (GeneralNode N142 )
5 -> BlankEdge: (FunctionEntryNode N13 ) -> (GeneralNode N14 )
423 -> DeclarationEdge: (GeneralNode N292 ) - (int* V_540 = (int*)V_537) -> (GeneralNode N293 )
44 -> DeclarationEdge: (GeneralNode N50 ) - (int V_153 = V_152) -> (GeneralNode N51 )
440 -> StatementEdge: (GeneralNode N302 ) - (V_490 = V_546) -> (GeneralNode N303 )
379 -> DeclarationEdge: (GeneralNode N265 ) - (int V_522 = V_473) -> (GeneralNode N266 )
65 -> DeclarationEdge: (GeneralNode N63 ) - (int V_198 = V_194) -> (GeneralNode N64 )
441 -> StatementEdge: (GeneralNode N303 ) - (V_491 = 0) -> (GeneralNode N304 )
148 -> DeclarationEdge: (GeneralNode N116 ) - (int V_308 = (int)V_303) -> (GeneralNode N117 )
458 -> DeclarationEdge: (GeneralNode N314 ) - (int V_503) -> (GeneralNode N315 )
576 -> AssumeEdge: (GeneralNode N392 ) - (not 1=V_601) -> (GeneralNode N420 )
580 -> DeclarationEdge: (GeneralNode N393 ) - (int V_562) -> (GeneralNode N394 )
222 -> DeclarationEdge: (GeneralNode N166 ) - (int V_416 = V_411) -> (GeneralNode N167 )
22 -> DeclarationEdge: (GeneralNode N34 ) - (int* V_140 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_137+0) -> (GeneralNode N35 )
413 -> FunctionSummaryEdge: (GeneralNode N287 ) - ("sub_4004f3_check"(): ) -> (GeneralNode N410 )
359 -> DeclarationEdge: (GeneralNode N252 ) - (int* V_514 = (int*)V_510) -> (GeneralNode N253 )
562 -> DeclarationEdge: (GeneralNode N382 ) - (int V_595 = V_590=0) -> (GeneralNode N383 )
480 -> DeclarationEdge: (GeneralNode N329 ) - (int V_564 = V_562+10) -> (GeneralNode N330 )
281 -> DeclarationEdge: (GeneralNode N205 ) - (struct union.anon{
int i64;
} union.anon* V_476 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N206 )
432 -> FunctionCallEdge: (GeneralNode N298 ) - ("llvm.ctpop.i32"(): FunctionSummaryEdge: (GeneralNode N298 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N411 )) -> (FunctionEntryNode N7 )
330 -> StatementEdge: (GeneralNode N234 ) - (V_500 = V_499) -> (GeneralNode N235 )
251 -> FunctionSummaryEdge: (GeneralNode N187 ) - ("sub_400509_C2"(): ) -> (GeneralNode N200 )
34 -> DeclarationEdge: (GeneralNode N42 ) - (int V_147 = (int)V_142) -> (GeneralNode N43 )
183 -> DeclarationEdge: (GeneralNode N140 ) - (int* V_361 = (int*)V_360) -> (GeneralNode N141 )
84 -> DeclarationEdge: (GeneralNode N76 ) - (int V_207 = V_198+8) -> (GeneralNode N77 )
490 -> FunctionReturnEdge: (FunctionExitNode N12 ) - (FunctionSummaryEdge: (GeneralNode N335 ) - ("sub_4004d7_recv"(): ) -> (GeneralNode N414 )) -> (GeneralNode N414 )
87 -> BlankEdge: (GeneralNode N17 ) -> (GeneralNode N79 )
460 -> AssumeEdge: (GeneralNode N315 ) - (not 1=V_552) -> (GeneralNode N395 )
395 -> FunctionSummaryEdge: (GeneralNode N276 ) - ("sub_4004ff_log"(): ) -> (GeneralNode N409 )
212 -> DeclarationEdge: (GeneralNode N159 ) - (int* V_409 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N160 )
334 -> BlankEdge: (GeneralNode N237 ) -> (GeneralNode N238 )
289 -> DeclarationEdge: (GeneralNode N209 ) - (int* V_480 = i64.V_474+0) -> (GeneralNode N210 )
157 -> StatementEdge: (GeneralNode N124 ) - (V_302 = V_313) -> (GeneralNode N125 )
27 -> DeclarationEdge: (GeneralNode N38 ) - (int V_144 = V_140) -> (GeneralNode N39 )
262 -> DeclarationEdge: (GeneralNode N193 ) - (int V_433 = V_430+8) -> (GeneralNode N194 )
416 -> BlankEdge: (GeneralNode N410 ) -> (GeneralNode N288 )
550 -> DeclarationEdge: (GeneralNode N375 ) - (int V_591 = V_590&255) -> (GeneralNode N376 )
405 -> DeclarationEdge: (GeneralNode N281 ) - (int V_532 = V_524+10) -> (GeneralNode N282 )
381 -> DeclarationEdge: (GeneralNode N266 ) - (int V_523 = V_522+12) -> (GeneralNode N267 )
161 -> StatementEdge: (GeneralNode N127 ) - (V_297 = V_315) -> (GeneralNode N128 )
244 -> DeclarationEdge: (GeneralNode N182 ) - (int V_427 = param_V_425+23) -> (GeneralNode N183 )
187 -> DeclarationEdge: (GeneralNode N143 ) - (int V_363 = V_357) -> (GeneralNode N144 )
499 -> StatementEdge: (GeneralNode N341 ) - (V_572 = V_570) -> (GeneralNode N342 )
353 -> DeclarationEdge: (GeneralNode N248 ) - (int V_511 = V_475) -> (GeneralNode N249 )
150 -> StatementEdge: (GeneralNode N118 ) - (V_303 = V_309) -> (GeneralNode N119 )
60 -> DeclarationEdge: (GeneralNode N59 ) - (int* V_194 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_190+0) -> (GeneralNode N60 )
546 -> DeclarationEdge: (GeneralNode N372 ) - (int* V_589 = (int*)V_588) -> (GeneralNode N373 )
525 -> DeclarationEdge: (GeneralNode N359 ) - (int V_583 = V_582!=0) -> (GeneralNode N360 )
208 -> DeclarationEdge: (GeneralNode N157 ) - (int* V_407 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N158 )
514 -> DeclarationEdge: (GeneralNode N349 ) - (int V_578 = V_577^1) -> (GeneralNode N350 )
503 -> StatementEdge: (GeneralNode N344 ) - (V_489 = 0) -> (GeneralNode N345 )
117 -> DeclarationEdge: (GeneralNode N97 ) - (int* V_258 = (int*)V_251) -> (GeneralNode N98 )
295 -> DeclarationEdge: (GeneralNode N212 ) - (int* V_483 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N213 )
269 -> StatementEdge: (GeneralNode N198 ) - (V_411 = V_436) -> (GeneralNode N199 )
264 -> DeclarationEdge: (GeneralNode N194 ) - (int* V_434 = (int*)V_433) -> (GeneralNode N195 )
199 -> DeclarationEdge: (GeneralNode N152 ) - (int V_369 = V_359+8) -> (GeneralNode N153 )
226 -> DeclarationEdge: (GeneralNode N168 ) - (int* V_418 = (int*)V_417) -> (GeneralNode N169 )
434 -> BlankEdge: (GeneralNode N411 ) -> (GeneralNode N299 )
349 -> BlankEdge: (GeneralNode N407 ) -> (GeneralNode N246 )
454 -> AssumeEdge: (GeneralNode N313 ) - (not 1=V_552) -> (GeneralNode N413 )
228 -> StatementEdge: (GeneralNode N170 ) - (V_412 = V_417) -> (GeneralNode N171 )
172 -> DeclarationEdge: (GeneralNode N133 ) - (int* V_354 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_352+0) -> (GeneralNode N134 )
227 -> StatementEdge: (GeneralNode N169 ) - (V_418 = V_415) -> (GeneralNode N170 )
32 -> StatementEdge: (GeneralNode N41 ) - (V_146 = V_143) -> (GeneralNode N42 )
430 -> DeclarationEdge: (GeneralNode N297 ) - (int V_543 = V_542&255) -> (GeneralNode N298 )
392 -> DeclarationEdge: (GeneralNode N273 ) - (int* V_529 = (int*)V_528) -> (GeneralNode N274 )
326 -> DeclarationEdge: (GeneralNode N231 ) - (int V_498 = V_485+-32) -> (GeneralNode N232 )
143 -> DeclarationEdge: (GeneralNode N113 ) - (int V_306 = V_305+-8) -> (GeneralNode N114 )
542 -> DeclarationEdge: (GeneralNode N370 ) - (struct struct.Memory{

} struct.Memory* V_561) -> (GeneralNode N371 )
569 -> StatementEdge: (GeneralNode N388 ) - (V_494 = 0) -> (GeneralNode N389 )
515 -> StatementEdge: (GeneralNode N350 ) - (V_490 = V_578) -> (GeneralNode N351 )
320 -> DeclarationEdge: (GeneralNode N227 ) - (int V_495 = V_485+-28) -> (GeneralNode N228 )
125 -> BlankEdge: (GeneralNode N103 ) -> (FunctionExitNode N21 )
561 -> StatementEdge: (GeneralNode N381 ) - (V_491 = 0) -> (GeneralNode N382 )
271 -> BlankEdge: (GeneralNode N29 ) -> (GeneralNode N201 )
259 -> DeclarationEdge: (GeneralNode N191 ) - (int V_432 = V_431) -> (GeneralNode N192 )
555 -> DeclarationEdge: (GeneralNode N377 ) - (int V_592) -> (GeneralNode N378 )
433 -> FunctionReturnEdge: (FunctionExitNode N9 ) - (FunctionSummaryEdge: (GeneralNode N298 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N411 )) -> (GeneralNode N411 )
192 -> DeclarationEdge: (GeneralNode N147 ) - (int V_366 = V_365) -> (GeneralNode N148 )
297 -> DeclarationEdge: (GeneralNode N214 ) - (int V_485 = V_482) -> (GeneralNode N215 )
463 -> DeclarationEdge: (GeneralNode N317 ) - (int* V_555 = (int*)V_554) -> (GeneralNode N318 )
357 -> StatementEdge: (GeneralNode N251 ) - (V_513 = V_511) -> (GeneralNode N252 )
186 -> DeclarationEdge: (GeneralNode N142 ) - (int V_362 = (int)V_357) -> (GeneralNode N143 )
176 -> DeclarationEdge: (GeneralNode N135 ) - (int* V_356 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_352+0) -> (GeneralNode N136 )
279 -> DeclarationEdge: (GeneralNode N204 ) - (int* V_475 = (int*)V_474) -> (GeneralNode N205 )
63 -> DeclarationEdge: (GeneralNode N61 ) - (int* V_196) -> (GeneralNode N62 )
377 -> FunctionReturnEdge: (FunctionExitNode N15 ) - (FunctionSummaryEdge: (GeneralNode N264 ) - ("sub_4004e0_send"(): ) -> (GeneralNode N408 )) -> (GeneralNode N408 )
435 -> DeclarationEdge: (GeneralNode N299 ) - (int V_544) -> (GeneralNode N300 )
296 -> DeclarationEdge: (GeneralNode N213 ) - (int V_484 = V_483) -> (GeneralNode N214 )
412 -> StatementEdge: (GeneralNode N286 ) - (V_482 = V_534) -> (GeneralNode N287 )
563 -> DeclarationEdge: (GeneralNode N383 ) - (int V_596) -> (GeneralNode N384 )
519 -> StatementEdge: (GeneralNode N354 ) - (V_492 = V_580) -> (GeneralNode N355 )
26 -> DeclarationEdge: (GeneralNode N37 ) - (int V_143 = V_141) -> (GeneralNode N38 )
100 -> DeclarationEdge: (GeneralNode N85 ) - (int* V_249) -> (GeneralNode N86 )
85 -> StatementEdge: (GeneralNode N77 ) - (V_194 = V_207) -> (GeneralNode N78 )
382 -> BlankEdge: (GeneralNode N267 ) -> (GeneralNode N395 )
306 -> StatementEdge: (GeneralNode N220 ) - (V_482 = V_488) -> (GeneralNode N221 )
237 -> DeclarationEdge: (GeneralNode N177 ) - (int V_424) -> (GeneralNode N178 )
181 -> DeclarationEdge: (GeneralNode N139 ) - (int V_360 = V_359+-8) -> (GeneralNode N140 )
122 -> StatementEdge: (GeneralNode N101 ) - (V_247 = V_260) -> (GeneralNode N102 )
323 -> DeclarationEdge: (GeneralNode N229 ) - (int* V_497 = (int*)V_495) -> (GeneralNode N230 )
231 -> DeclarationEdge: (GeneralNode N172 ) - (int V_420 = V_414) -> (GeneralNode N173 )
36 -> DeclarationEdge: (GeneralNode N44 ) - (int V_149) -> (GeneralNode N45 )
521 -> DeclarationEdge: (GeneralNode N355 ) - (int V_581 = V_574>>31) -> (GeneralNode N356 )
506 -> FunctionSummaryEdge: (GeneralNode N346 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N415 )
541 -> DeclarationEdge: (GeneralNode N369 ) - (int V_554) -> (GeneralNode N370 )
16 -> BlankEdge: (GeneralNode N31 ) -> (GeneralNode N32 )
419 -> DeclarationEdge: (GeneralNode N289 ) - (int V_537 = V_536+-8) -> (GeneralNode N290 )
3 -> BlankEdge: (FunctionEntryNode N7 ) -> (GeneralNode N8 )
448 -> StatementEdge: (GeneralNode N309 ) - (V_493 = V_550) -> (GeneralNode N310 )
159 -> DeclarationEdge: (GeneralNode N125 ) - (int* V_314 = (int*)V_305) -> (GeneralNode N126 )
343 -> DeclarationEdge: (GeneralNode N242 ) - (int* V_508 = (int*)V_507) -> (GeneralNode N243 )
332 -> DeclarationEdge: (GeneralNode N235 ) - (int V_502 = param_V_501+93) -> (GeneralNode N236 )
242 -> DeclarationEdge: (GeneralNode N181 ) - (int V_426 = param_V_425+-102) -> (GeneralNode N182 )
449 -> StatementEdge: (GeneralNode N310 ) - (V_494 = 0) -> (GeneralNode N311 )
77 -> DeclarationEdge: (GeneralNode N71 ) - (int V_204 = V_203) -> (GeneralNode N72 )
1 -> BlankEdge: (FunctionEntryNode N1 ) -> (GeneralNode N2 )
581 -> AssumeEdge: (GeneralNode N394 ) - (1=V_601) -> (GeneralNode N316 )
403 -> DeclarationEdge: (GeneralNode N280 ) - (int V_531 = V_524+-57) -> (GeneralNode N281 )
140 -> DeclarationEdge: (GeneralNode N111 ) - (int V_304 = V_302) -> (GeneralNode N112 )
474 -> StatementEdge: (GeneralNode N325 ) - (V_482 = V_560) -> (GeneralNode N326 )
370 -> DeclarationEdge: (GeneralNode N260 ) - (int V_520 = V_519+-8) -> (GeneralNode N261 )
124 -> BlankEdge: (GeneralNode N20 ) -> (GeneralNode N103 )
305 -> DeclarationEdge: (GeneralNode N219 ) - (int V_488 = V_485+-32) -> (GeneralNode N220 )
54 -> DeclarationEdge: (GeneralNode N56 ) - (int* V_191 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_190+0) -> (GeneralNode N57 )
553 -> FunctionReturnEdge: (FunctionExitNode N9 ) - (FunctionSummaryEdge: (GeneralNode N376 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N418 )) -> (GeneralNode N418 )
195 -> DeclarationEdge: (GeneralNode N149 ) - (int* V_367 = (int*)V_359) -> (GeneralNode N150 )
475 -> ReturnStatementEdge: (GeneralNode N326 ) - (returnV_561) -> (FunctionExitNode N30 )
431 -> FunctionSummaryEdge: (GeneralNode N298 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N411 )
560 -> StatementEdge: (GeneralNode N380 ) - (V_490 = V_594) -> (GeneralNode N381 )
437 -> DeclarationEdge: (GeneralNode N300 ) - (int V_545 = V_544&1) -> (GeneralNode N301 )
426 -> DeclarationEdge: (GeneralNode N294 ) - (int* V_541 = (int*)V_537) -> (GeneralNode N295 )
246 -> DeclarationEdge: (GeneralNode N183 ) - (int V_428 = V_416+-32) -> (GeneralNode N184 )
235 -> DeclarationEdge: (GeneralNode N175 ) - (int V_422 = (int)V_413) -> (GeneralNode N176 )
502 -> DeclarationEdge: (GeneralNode N343 ) - (int V_574 = V_573) -> (GeneralNode N344 )
204 -> BlankEdge: (GeneralNode N155 ) -> (GeneralNode N156 )
160 -> DeclarationEdge: (GeneralNode N126 ) - (int V_315 = V_314) -> (GeneralNode N127 )
8 -> BlankEdge: (FunctionEntryNode N22 ) -> (GeneralNode N23 )
489 -> FunctionCallEdge: (GeneralNode N335 ) - ("sub_4004d7_recv"(): FunctionSummaryEdge: (GeneralNode N335 ) - ("sub_4004d7_recv"(): ) -> (GeneralNode N414 )) -> (FunctionEntryNode N10 )
385 -> DeclarationEdge: (GeneralNode N269 ) - (int V_525 = V_524+-89) -> (GeneralNode N270 )
152 -> DeclarationEdge: (GeneralNode N120 ) - (int V_311) -> (GeneralNode N121 )
548 -> StatementEdge: (GeneralNode N374 ) - (V_489 = 0) -> (GeneralNode N375 )
168 -> BlankEdge: (GeneralNode N131 ) -> (GeneralNode N132 )
414 -> FunctionCallEdge: (GeneralNode N287 ) - ("sub_4004f3_check"(): FunctionSummaryEdge: (GeneralNode N287 ) - ("sub_4004f3_check"(): ) -> (GeneralNode N410 )) -> (FunctionEntryNode N19 )
216 -> DeclarationEdge: (GeneralNode N161 ) - (int* V_411 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N162 )
141 -> DeclarationEdge: (GeneralNode N112 ) - (int V_305 = V_301) -> (GeneralNode N113 )
121 -> DeclarationEdge: (GeneralNode N100 ) - (int V_260 = V_251+8) -> (GeneralNode N101 )
528 -> AssumeEdge: (GeneralNode N361 ) - (1=V_584) -> (GeneralNode N416 )
481 -> DeclarationEdge: (GeneralNode N330 ) - (int V_565 = V_482) -> (GeneralNode N331 )
523 -> StatementEdge: (GeneralNode N357 ) - (V_493 = V_582) -> (GeneralNode N358 )
428 -> StatementEdge: (GeneralNode N296 ) - (V_489 = 0) -> (GeneralNode N297 )
400 -> BlankEdge: (GeneralNode N278 ) -> (GeneralNode N395 )
275 -> DeclarationEdge: (GeneralNode N202 ) - (int* V_473 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N203 )
465 -> StatementEdge: (GeneralNode N319 ) - (V_483 = V_556) -> (GeneralNode N320 )
221 -> DeclarationEdge: (GeneralNode N165 ) - (int V_415 = V_412) -> (GeneralNode N166 )
478 -> DeclarationEdge: (GeneralNode N328 ) - (int V_563 = V_562+-66) -> (GeneralNode N329 )
585 -> DeclarationEdge: (GeneralNode N397 ) - (struct struct.Memory{

} struct.Memory* V_604) -> (GeneralNode N398 )
15 -> BlankEdge: (GeneralNode N31 ) -> (FunctionExitNode N12 )
559 -> DeclarationEdge: (GeneralNode N379 ) - (int V_594 = V_593^1) -> (GeneralNode N380 )
439 -> DeclarationEdge: (GeneralNode N301 ) - (int V_546 = V_545^1) -> (GeneralNode N302 )
544 -> DeclarationEdge: (GeneralNode N371 ) - (int V_588 = V_554+-20) -> (GeneralNode N372 )
508 -> FunctionReturnEdge: (FunctionExitNode N9 ) - (FunctionSummaryEdge: (GeneralNode N346 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N415 )) -> (GeneralNode N415 )
444 -> StatementEdge: (GeneralNode N306 ) - (V_492 = V_548) -> (GeneralNode N307 )
378 -> BlankEdge: (GeneralNode N408 ) -> (GeneralNode N265 )
145 -> DeclarationEdge: (GeneralNode N114 ) - (int* V_307 = (int*)V_306) -> (GeneralNode N115 )
272 -> BlankEdge: (GeneralNode N395 ) -> (FunctionExitNode N30 )
102 -> DeclarationEdge: (GeneralNode N87 ) - (int V_251 = V_247) -> (GeneralNode N88 )
453 -> AssumeEdge: (GeneralNode N313 ) - (1=V_552) -> (GeneralNode N412 )
189 -> StatementEdge: (GeneralNode N145 ) - (V_354 = V_364) -> (GeneralNode N146 )
488 -> FunctionSummaryEdge: (GeneralNode N335 ) - ("sub_4004d7_recv"(): ) -> (GeneralNode N414 )
459 -> AssumeEdge: (GeneralNode N315 ) - (1=V_552) -> (GeneralNode N237 )
258 -> DeclarationEdge: (GeneralNode N190 ) - (int* V_431 = (int*)V_430) -> (GeneralNode N191 )
219 -> DeclarationEdge: (GeneralNode N163 ) - (int* V_413) -> (GeneralNode N164 )
4 -> BlankEdge: (FunctionEntryNode N10 ) -> (GeneralNode N11 )
537 -> AssumeEdge: (GeneralNode N366 ) - (1=V_584) -> (GeneralNode N279 )
188 -> DeclarationEdge: (GeneralNode N144 ) - (int V_364) -> (GeneralNode N145 )
557 -> DeclarationEdge: (GeneralNode N378 ) - (int V_593 = V_592&1) -> (GeneralNode N379 )
452 -> DeclarationEdge: (GeneralNode N312 ) - (int V_552 = V_547|V_551) -> (GeneralNode N313 )
354 -> DeclarationEdge: (GeneralNode N249 ) - (int V_512 = V_473) -> (GeneralNode N250 )
568 -> StatementEdge: (GeneralNode N387 ) - (V_493 = V_598) -> (GeneralNode N388 )
512 -> DeclarationEdge: (GeneralNode N348 ) - (int V_577 = V_576&1) -> (GeneralNode N349 )
496 -> DeclarationEdge: (GeneralNode N339 ) - (int V_571 = V_473) -> (GeneralNode N340 )
302 -> StatementEdge: (GeneralNode N217 ) - (V_487 = V_484) -> (GeneralNode N218 )
104 -> DeclarationEdge: (GeneralNode N88 ) - (int V_252 = V_251+-8) -> (GeneralNode N89 )
301 -> DeclarationEdge: (GeneralNode N216 ) - (int* V_487 = (int*)V_486) -> (GeneralNode N217 )
80 -> DeclarationEdge: (GeneralNode N73 ) - (int* V_205 = (int*)V_198) -> (GeneralNode N74 )
50 -> BlankEdge: (GeneralNode N14 ) -> (GeneralNode N55 )
588 -> DeclarationEdge: (GeneralNode N399 ) - (int V_606 = V_605+-20) -> (GeneralNode N400 )
18 -> DeclarationEdge: (GeneralNode N32 ) - (int* V_138 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_137+0) -> (GeneralNode N33 )
464 -> DeclarationEdge: (GeneralNode N318 ) - (int V_556 = V_555) -> (GeneralNode N319 )
427 -> DeclarationEdge: (GeneralNode N295 ) - (int V_542 = V_541) -> (GeneralNode N296 )
318 -> DeclarationEdge: (GeneralNode N226 ) - (int* V_494 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N227 )
239 -> StatementEdge: (GeneralNode N179 ) - (V_409 = V_421) -> (GeneralNode N180 )


------------------Printing out tcfa from main entry function------------------------------------

BlankEdge: (FunctionEntryNode N25 ) -> (GeneralNode N26 )
BlankEdge: (GeneralNode N26 ) -> (GeneralNode N155 )
BlankEdge: (GeneralNode N155 ) -> (GeneralNode N156 )
DeclarationEdge: (GeneralNode N156 ) - (int* V_406 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N157 )
DeclarationEdge: (GeneralNode N157 ) - (int* V_407 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N158 )
DeclarationEdge: (GeneralNode N158 ) - (int* V_408 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N159 )
DeclarationEdge: (GeneralNode N159 ) - (int* V_409 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N160 )
DeclarationEdge: (GeneralNode N160 ) - (int* V_410 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N161 )
DeclarationEdge: (GeneralNode N161 ) - (int* V_411 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N162 )
DeclarationEdge: (GeneralNode N162 ) - (int* V_412 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_405+0) -> (GeneralNode N163 )
DeclarationEdge: (GeneralNode N163 ) - (int* V_413) -> (GeneralNode N164 )
DeclarationEdge: (GeneralNode N164 ) - (int* V_414) -> (GeneralNode N165 )
DeclarationEdge: (GeneralNode N165 ) - (int V_415 = V_412) -> (GeneralNode N166 )
DeclarationEdge: (GeneralNode N166 ) - (int V_416 = V_411) -> (GeneralNode N167 )
DeclarationEdge: (GeneralNode N167 ) - (int V_417 = V_416+-8) -> (GeneralNode N168 )
DeclarationEdge: (GeneralNode N168 ) - (int* V_418 = (int*)V_417) -> (GeneralNode N169 )
StatementEdge: (GeneralNode N169 ) - (V_418 = V_415) -> (GeneralNode N170 )
StatementEdge: (GeneralNode N170 ) - (V_412 = V_417) -> (GeneralNode N171 )
DeclarationEdge: (GeneralNode N171 ) - (int V_419 = (int)V_414) -> (GeneralNode N172 )
DeclarationEdge: (GeneralNode N172 ) - (int V_420 = V_414) -> (GeneralNode N173 )
DeclarationEdge: (GeneralNode N173 ) - (int V_421) -> (GeneralNode N174 )
StatementEdge: (GeneralNode N174 ) - (V_408 = V_421) -> (GeneralNode N175 )
DeclarationEdge: (GeneralNode N175 ) - (int V_422 = (int)V_413) -> (GeneralNode N176 )
DeclarationEdge: (GeneralNode N176 ) - (int V_423 = V_413) -> (GeneralNode N177 )
DeclarationEdge: (GeneralNode N177 ) - (int V_424) -> (GeneralNode N178 )
StatementEdge: (GeneralNode N178 ) - (V_407 = V_424) -> (GeneralNode N179 )
StatementEdge: (GeneralNode N179 ) - (V_409 = V_421) -> (GeneralNode N180 )
StatementEdge: (GeneralNode N180 ) - (V_410 = V_424) -> (GeneralNode N181 )
DeclarationEdge: (GeneralNode N181 ) - (int V_426 = param_V_425+-102) -> (GeneralNode N182 )
DeclarationEdge: (GeneralNode N182 ) - (int V_427 = param_V_425+23) -> (GeneralNode N183 )
DeclarationEdge: (GeneralNode N183 ) - (int V_428 = V_416+-32) -> (GeneralNode N184 )
DeclarationEdge: (GeneralNode N184 ) - (int* V_429 = (int*)V_428) -> (GeneralNode N185 )
StatementEdge: (GeneralNode N185 ) - (V_429 = V_427) -> (GeneralNode N186 )
StatementEdge: (GeneralNode N186 ) - (V_411 = V_428) -> (GeneralNode N187 )
FunctionCallEdge: (GeneralNode N187 ) - ("sub_400509_C2"(): FunctionSummaryEdge: (GeneralNode N187 ) - ("sub_400509_C2"(): ) -> (GeneralNode N200 )) -> (FunctionEntryNode N28 )
BlankEdge: (FunctionEntryNode N28 ) -> (GeneralNode N29 )
BlankEdge: (GeneralNode N29 ) -> (GeneralNode N201 )
BlankEdge: (GeneralNode N201 ) -> (GeneralNode N202 )
DeclarationEdge: (GeneralNode N202 ) - (int* V_473 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N203 )
DeclarationEdge: (GeneralNode N203 ) - (struct union.anon{
int i64;
} union.anon* V_474 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N204 )
DeclarationEdge: (GeneralNode N204 ) - (int* V_475 = (int*)V_474) -> (GeneralNode N205 )
DeclarationEdge: (GeneralNode N205 ) - (struct union.anon{
int i64;
} union.anon* V_476 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N206 )
DeclarationEdge: (GeneralNode N206 ) - (int* V_477 = (int*)V_476) -> (GeneralNode N207 )
DeclarationEdge: (GeneralNode N207 ) - (struct union.anon{
int i64;
} union.anon* V_478 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N208 )
DeclarationEdge: (GeneralNode N208 ) - (int* V_479 = (int*)V_478) -> (GeneralNode N209 )
DeclarationEdge: (GeneralNode N209 ) - (int* V_480 = i64.V_474+0) -> (GeneralNode N210 )
DeclarationEdge: (GeneralNode N210 ) - (int* V_481 = i64.V_478+0) -> (GeneralNode N211 )
DeclarationEdge: (GeneralNode N211 ) - (int* V_482 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N212 )
DeclarationEdge: (GeneralNode N212 ) - (int* V_483 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_472+0) -> (GeneralNode N213 )
DeclarationEdge: (GeneralNode N213 ) - (int V_484 = V_483) -> (GeneralNode N214 )
DeclarationEdge: (GeneralNode N214 ) - (int V_485 = V_482) -> (GeneralNode N215 )
DeclarationEdge: (GeneralNode N215 ) - (int V_486 = V_485+-8) -> (GeneralNode N216 )
DeclarationEdge: (GeneralNode N216 ) - (int* V_487 = (int*)V_486) -> (GeneralNode N217 )
StatementEdge: (GeneralNode N217 ) - (V_487 = V_484) -> (GeneralNode N218 )
StatementEdge: (GeneralNode N218 ) - (V_483 = V_486) -> (GeneralNode N219 )
DeclarationEdge: (GeneralNode N219 ) - (int V_488 = V_485+-32) -> (GeneralNode N220 )
StatementEdge: (GeneralNode N220 ) - (V_482 = V_488) -> (GeneralNode N221 )
DeclarationEdge: (GeneralNode N221 ) - (int* V_489 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N222 )
DeclarationEdge: (GeneralNode N222 ) - (int* V_490 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N223 )
DeclarationEdge: (GeneralNode N223 ) - (int* V_491 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N224 )
DeclarationEdge: (GeneralNode N224 ) - (int* V_492 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N225 )
DeclarationEdge: (GeneralNode N225 ) - (int* V_493 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N226 )
DeclarationEdge: (GeneralNode N226 ) - (int* V_494 = i8.%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }.param_V_472+0) -> (GeneralNode N227 )
DeclarationEdge: (GeneralNode N227 ) - (int V_495 = V_485+-28) -> (GeneralNode N228 )
DeclarationEdge: (GeneralNode N228 ) - (int V_496 = V_479) -> (GeneralNode N229 )
DeclarationEdge: (GeneralNode N229 ) - (int* V_497 = (int*)V_495) -> (GeneralNode N230 )
StatementEdge: (GeneralNode N230 ) - (V_497 = V_496) -> (GeneralNode N231 )
DeclarationEdge: (GeneralNode N231 ) - (int V_498 = V_485+-32) -> (GeneralNode N232 )
DeclarationEdge: (GeneralNode N232 ) - (int V_499 = V_477) -> (GeneralNode N233 )
DeclarationEdge: (GeneralNode N233 ) - (int* V_500 = (int*)V_498) -> (GeneralNode N234 )
StatementEdge: (GeneralNode N234 ) - (V_500 = V_499) -> (GeneralNode N235 )
DeclarationEdge: (GeneralNode N235 ) - (int V_502 = param_V_501+93) -> (GeneralNode N236 )
BlankEdge: (GeneralNode N236 ) -> (GeneralNode N367 )
BlankEdge: (GeneralNode N367 ) -> (GeneralNode N368 )
DeclarationEdge: (GeneralNode N368 ) - (int V_587) -> (GeneralNode N369 )
DeclarationEdge: (GeneralNode N369 ) - (int V_554) -> (GeneralNode N370 )
DeclarationEdge: (GeneralNode N370 ) - (struct struct.Memory{

} struct.Memory* V_561) -> (GeneralNode N371 )
DeclarationEdge: (GeneralNode N371 ) - (int V_588 = V_554+-20) -> (GeneralNode N372 )
DeclarationEdge: (GeneralNode N372 ) - (int* V_589 = (int*)V_588) -> (GeneralNode N373 )
DeclarationEdge: (GeneralNode N373 ) - (int V_590 = V_589) -> (GeneralNode N374 )
StatementEdge: (GeneralNode N374 ) - (V_489 = 0) -> (GeneralNode N375 )
DeclarationEdge: (GeneralNode N375 ) - (int V_591 = V_590&255) -> (GeneralNode N376 )
FunctionCallEdge: (GeneralNode N376 ) - ("llvm.ctpop.i32"(): FunctionSummaryEdge: (GeneralNode N376 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N418 )) -> (FunctionEntryNode N7 )
BlankEdge: (FunctionEntryNode N7 ) -> (GeneralNode N8 )
BlankEdge: (GeneralNode N8 ) -> (FunctionExitNode N9 )
BlankEdge: (GeneralNode N8 ) -> (FunctionExitNode N9 )
BlankEdge: (GeneralNode N8 ) -> (FunctionExitNode N9 )
FunctionReturnEdge: (FunctionExitNode N9 ) - (FunctionSummaryEdge: (GeneralNode N376 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N418 )) -> (GeneralNode N418 )
FunctionSummaryEdge: (GeneralNode N376 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N418 )
BlankEdge: (GeneralNode N418 ) -> (GeneralNode N377 )
DeclarationEdge: (GeneralNode N377 ) - (int V_592) -> (GeneralNode N378 )
DeclarationEdge: (GeneralNode N378 ) - (int V_593 = V_592&1) -> (GeneralNode N379 )
DeclarationEdge: (GeneralNode N379 ) - (int V_594 = V_593^1) -> (GeneralNode N380 )
StatementEdge: (GeneralNode N380 ) - (V_490 = V_594) -> (GeneralNode N381 )
StatementEdge: (GeneralNode N381 ) - (V_491 = 0) -> (GeneralNode N382 )
DeclarationEdge: (GeneralNode N382 ) - (int V_595 = V_590=0) -> (GeneralNode N383 )
DeclarationEdge: (GeneralNode N383 ) - (int V_596) -> (GeneralNode N384 )
StatementEdge: (GeneralNode N384 ) - (V_492 = V_596) -> (GeneralNode N385 )
DeclarationEdge: (GeneralNode N385 ) - (int V_597 = V_590>>31) -> (GeneralNode N386 )
DeclarationEdge: (GeneralNode N386 ) - (int V_598) -> (GeneralNode N387 )
StatementEdge: (GeneralNode N387 ) - (V_493 = V_598) -> (GeneralNode N388 )
StatementEdge: (GeneralNode N388 ) - (V_494 = 0) -> (GeneralNode N389 )
DeclarationEdge: (GeneralNode N389 ) - (int V_599 = V_595^-1) -> (GeneralNode N390 )
DeclarationEdge: (GeneralNode N390 ) - (int V_600 = V_598=0) -> (GeneralNode N391 )
DeclarationEdge: (GeneralNode N391 ) - (int V_601 = V_600&V_599) -> (GeneralNode N392 )
AssumeEdge: (GeneralNode N392 ) - (not 1=V_601) -> (GeneralNode N420 )
DeclarationEdge: (GeneralNode N420 ) - (int V_602 = -77) -> (GeneralNode N393 )
DeclarationEdge: (GeneralNode N393 ) - (int V_562) -> (GeneralNode N394 )
AssumeEdge: (GeneralNode N394 ) - (not 1=V_601) -> (GeneralNode N327 )
BlankEdge: (GeneralNode N327 ) -> (GeneralNode N328 )
DeclarationEdge: (GeneralNode N328 ) - (int V_563 = V_562+-66) -> (GeneralNode N329 )
DeclarationEdge: (GeneralNode N329 ) - (int V_564 = V_562+10) -> (GeneralNode N330 )
DeclarationEdge: (GeneralNode N330 ) - (int V_565 = V_482) -> (GeneralNode N331 )
DeclarationEdge: (GeneralNode N331 ) - (int V_566 = V_565+-8) -> (GeneralNode N332 )
DeclarationEdge: (GeneralNode N332 ) - (int* V_567 = (int*)V_566) -> (GeneralNode N333 )
StatementEdge: (GeneralNode N333 ) - (V_567 = V_564) -> (GeneralNode N334 )
StatementEdge: (GeneralNode N334 ) - (V_482 = V_566) -> (GeneralNode N335 )
FunctionCallEdge: (GeneralNode N335 ) - ("sub_4004d7_recv"(): FunctionSummaryEdge: (GeneralNode N335 ) - ("sub_4004d7_recv"(): ) -> (GeneralNode N414 )) -> (FunctionEntryNode N10 )
BlankEdge: (FunctionEntryNode N10 ) -> (GeneralNode N11 )
BlankEdge: (GeneralNode N11 ) -> (GeneralNode N31 )
BlankEdge: (GeneralNode N31 ) -> (GeneralNode N32 )
DeclarationEdge: (GeneralNode N32 ) - (int* V_138 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_137+0) -> (GeneralNode N33 )
DeclarationEdge: (GeneralNode N33 ) - (int* V_139 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_137+0) -> (GeneralNode N34 )
DeclarationEdge: (GeneralNode N34 ) - (int* V_140 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_137+0) -> (GeneralNode N35 )
DeclarationEdge: (GeneralNode N35 ) - (int* V_141 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_137+0) -> (GeneralNode N36 )
DeclarationEdge: (GeneralNode N36 ) - (int* V_142) -> (GeneralNode N37 )
DeclarationEdge: (GeneralNode N37 ) - (int V_143 = V_141) -> (GeneralNode N38 )
DeclarationEdge: (GeneralNode N38 ) - (int V_144 = V_140) -> (GeneralNode N39 )
DeclarationEdge: (GeneralNode N39 ) - (int V_145 = V_144+-8) -> (GeneralNode N40 )
DeclarationEdge: (GeneralNode N40 ) - (int* V_146 = (int*)V_145) -> (GeneralNode N41 )
StatementEdge: (GeneralNode N41 ) - (V_146 = V_143) -> (GeneralNode N42 )
DeclarationEdge: (GeneralNode N42 ) - (int V_147 = (int)V_142) -> (GeneralNode N43 )
DeclarationEdge: (GeneralNode N43 ) - (int V_148 = V_142) -> (GeneralNode N44 )
DeclarationEdge: (GeneralNode N44 ) - (int V_149) -> (GeneralNode N45 )
StatementEdge: (GeneralNode N45 ) - (V_139 = V_149) -> (GeneralNode N46 )
DeclarationEdge: (GeneralNode N46 ) - (int* V_150 = (int*)V_145) -> (GeneralNode N47 )
DeclarationEdge: (GeneralNode N47 ) - (int V_151 = V_150) -> (GeneralNode N48 )
StatementEdge: (GeneralNode N48 ) - (V_141 = V_151) -> (GeneralNode N49 )
DeclarationEdge: (GeneralNode N49 ) - (int* V_152 = (int*)V_144) -> (GeneralNode N50 )
DeclarationEdge: (GeneralNode N50 ) - (int V_153 = V_152) -> (GeneralNode N51 )
StatementEdge: (GeneralNode N51 ) - (V_138 = V_153) -> (GeneralNode N52 )
DeclarationEdge: (GeneralNode N52 ) - (int V_154 = V_144+8) -> (GeneralNode N53 )
StatementEdge: (GeneralNode N53 ) - (V_140 = V_154) -> (GeneralNode N54 )
ReturnStatementEdge: (GeneralNode N54 ) - (returnparam_V_155) -> (FunctionExitNode N12 )
BlankEdge: (GeneralNode N31 ) -> (FunctionExitNode N12 )
FunctionReturnEdge: (FunctionExitNode N12 ) - (FunctionSummaryEdge: (GeneralNode N335 ) - ("sub_4004d7_recv"(): ) -> (GeneralNode N414 )) -> (GeneralNode N414 )
FunctionSummaryEdge: (GeneralNode N335 ) - ("sub_4004d7_recv"(): ) -> (GeneralNode N414 )
BlankEdge: (GeneralNode N414 ) -> (GeneralNode N336 )
DeclarationEdge: (GeneralNode N336 ) - (int V_568 = V_483) -> (GeneralNode N337 )
DeclarationEdge: (GeneralNode N337 ) - (int V_569 = V_568+-12) -> (GeneralNode N338 )
DeclarationEdge: (GeneralNode N338 ) - (int V_570 = V_475) -> (GeneralNode N339 )
DeclarationEdge: (GeneralNode N339 ) - (int V_571 = V_473) -> (GeneralNode N340 )
DeclarationEdge: (GeneralNode N340 ) - (int* V_572 = (int*)V_569) -> (GeneralNode N341 )
StatementEdge: (GeneralNode N341 ) - (V_572 = V_570) -> (GeneralNode N342 )
DeclarationEdge: (GeneralNode N342 ) - (int* V_573 = (int*)V_569) -> (GeneralNode N343 )
DeclarationEdge: (GeneralNode N343 ) - (int V_574 = V_573) -> (GeneralNode N344 )
StatementEdge: (GeneralNode N344 ) - (V_489 = 0) -> (GeneralNode N345 )
DeclarationEdge: (GeneralNode N345 ) - (int V_575 = V_574&255) -> (GeneralNode N346 )
FunctionReturnEdge: (FunctionExitNode N9 ) - (FunctionSummaryEdge: (GeneralNode N346 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N415 )) -> (GeneralNode N415 )
FunctionSummaryEdge: (GeneralNode N346 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N415 )
BlankEdge: (GeneralNode N415 ) -> (GeneralNode N347 )
DeclarationEdge: (GeneralNode N347 ) - (int V_576) -> (GeneralNode N348 )
DeclarationEdge: (GeneralNode N348 ) - (int V_577 = V_576&1) -> (GeneralNode N349 )
DeclarationEdge: (GeneralNode N349 ) - (int V_578 = V_577^1) -> (GeneralNode N350 )
StatementEdge: (GeneralNode N350 ) - (V_490 = V_578) -> (GeneralNode N351 )
StatementEdge: (GeneralNode N351 ) - (V_491 = 0) -> (GeneralNode N352 )
DeclarationEdge: (GeneralNode N352 ) - (int V_579 = V_574=0) -> (GeneralNode N353 )
DeclarationEdge: (GeneralNode N353 ) - (int V_580) -> (GeneralNode N354 )
StatementEdge: (GeneralNode N354 ) - (V_492 = V_580) -> (GeneralNode N355 )
DeclarationEdge: (GeneralNode N355 ) - (int V_581 = V_574>>31) -> (GeneralNode N356 )
DeclarationEdge: (GeneralNode N356 ) - (int V_582) -> (GeneralNode N357 )
StatementEdge: (GeneralNode N357 ) - (V_493 = V_582) -> (GeneralNode N358 )
StatementEdge: (GeneralNode N358 ) - (V_494 = 0) -> (GeneralNode N359 )
DeclarationEdge: (GeneralNode N359 ) - (int V_583 = V_582!=0) -> (GeneralNode N360 )
DeclarationEdge: (GeneralNode N360 ) - (int V_584 = V_579|V_583) -> (GeneralNode N361 )
AssumeEdge: (GeneralNode N361 ) - (not 1=V_584) -> (GeneralNode N417 )
DeclarationEdge: (GeneralNode N417 ) - (int V_585 = 53) -> (GeneralNode N362 )
DeclarationEdge: (GeneralNode N362 ) - (int V_524) -> (GeneralNode N363 )
DeclarationEdge: (GeneralNode N363 ) - (int V_586) -> (GeneralNode N364 )
StatementEdge: (GeneralNode N364 ) - (V_480 = V_586) -> (GeneralNode N365 )
StatementEdge: (GeneralNode N365 ) - (V_481 = V_586) -> (GeneralNode N366 )
AssumeEdge: (GeneralNode N366 ) - (not 1=V_584) -> (GeneralNode N268 )
BlankEdge: (GeneralNode N268 ) -> (GeneralNode N269 )
DeclarationEdge: (GeneralNode N269 ) - (int V_525 = V_524+-89) -> (GeneralNode N270 )
DeclarationEdge: (GeneralNode N270 ) - (int V_526 = V_524+10) -> (GeneralNode N271 )
DeclarationEdge: (GeneralNode N271 ) - (int V_527 = V_482) -> (GeneralNode N272 )
DeclarationEdge: (GeneralNode N272 ) - (int V_528 = V_527+-8) -> (GeneralNode N273 )
DeclarationEdge: (GeneralNode N273 ) - (int* V_529 = (int*)V_528) -> (GeneralNode N274 )
StatementEdge: (GeneralNode N274 ) - (V_529 = V_526) -> (GeneralNode N275 )
StatementEdge: (GeneralNode N275 ) - (V_482 = V_528) -> (GeneralNode N276 )
FunctionCallEdge: (GeneralNode N276 ) - ("sub_4004ff_log"(): FunctionSummaryEdge: (GeneralNode N276 ) - ("sub_4004ff_log"(): ) -> (GeneralNode N409 )) -> (FunctionEntryNode N16 )
BlankEdge: (FunctionEntryNode N16 ) -> (GeneralNode N17 )
BlankEdge: (GeneralNode N17 ) -> (GeneralNode N79 )
BlankEdge: (GeneralNode N79 ) -> (GeneralNode N80 )
DeclarationEdge: (GeneralNode N80 ) - (int* V_244 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_243+0) -> (GeneralNode N81 )
DeclarationEdge: (GeneralNode N81 ) - (struct union.anon{
int i64;
} union.anon* V_245 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_243+0) -> (GeneralNode N82 )
DeclarationEdge: (GeneralNode N82 ) - (int* V_246 = (int*)V_245) -> (GeneralNode N83 )
DeclarationEdge: (GeneralNode N83 ) - (int* V_247 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_243+0) -> (GeneralNode N84 )
DeclarationEdge: (GeneralNode N84 ) - (int* V_248 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_243+0) -> (GeneralNode N85 )
DeclarationEdge: (GeneralNode N85 ) - (int* V_249) -> (GeneralNode N86 )
DeclarationEdge: (GeneralNode N86 ) - (int V_250 = V_248) -> (GeneralNode N87 )
DeclarationEdge: (GeneralNode N87 ) - (int V_251 = V_247) -> (GeneralNode N88 )
DeclarationEdge: (GeneralNode N88 ) - (int V_252 = V_251+-8) -> (GeneralNode N89 )
DeclarationEdge: (GeneralNode N89 ) - (int* V_253 = (int*)V_252) -> (GeneralNode N90 )
StatementEdge: (GeneralNode N90 ) - (V_253 = V_250) -> (GeneralNode N91 )
DeclarationEdge: (GeneralNode N91 ) - (int V_254 = (int)V_249) -> (GeneralNode N92 )
DeclarationEdge: (GeneralNode N92 ) - (int V_255 = V_246) -> (GeneralNode N93 )
StatementEdge: (GeneralNode N93 ) - (V_249 = V_255) -> (GeneralNode N94 )
DeclarationEdge: (GeneralNode N94 ) - (int* V_256 = (int*)V_252) -> (GeneralNode N95 )
DeclarationEdge: (GeneralNode N95 ) - (int V_257 = V_256) -> (GeneralNode N96 )
StatementEdge: (GeneralNode N96 ) - (V_248 = V_257) -> (GeneralNode N97 )
DeclarationEdge: (GeneralNode N97 ) - (int* V_258 = (int*)V_251) -> (GeneralNode N98 )
DeclarationEdge: (GeneralNode N98 ) - (int V_259 = V_258) -> (GeneralNode N99 )
StatementEdge: (GeneralNode N99 ) - (V_244 = V_259) -> (GeneralNode N100 )
DeclarationEdge: (GeneralNode N100 ) - (int V_260 = V_251+8) -> (GeneralNode N101 )
StatementEdge: (GeneralNode N101 ) - (V_247 = V_260) -> (GeneralNode N102 )
ReturnStatementEdge: (GeneralNode N102 ) - (returnparam_V_261) -> (FunctionExitNode N18 )
BlankEdge: (GeneralNode N79 ) -> (FunctionExitNode N18 )
FunctionReturnEdge: (FunctionExitNode N18 ) - (FunctionSummaryEdge: (GeneralNode N276 ) - ("sub_4004ff_log"(): ) -> (GeneralNode N409 )) -> (GeneralNode N409 )
FunctionSummaryEdge: (GeneralNode N276 ) - ("sub_4004ff_log"(): ) -> (GeneralNode N409 )
BlankEdge: (GeneralNode N409 ) -> (GeneralNode N277 )
DeclarationEdge: (GeneralNode N277 ) - (int V_530 = V_473) -> (GeneralNode N278 )
BlankEdge: (GeneralNode N278 ) -> (GeneralNode N395 )
BlankEdge: (GeneralNode N395 ) -> (GeneralNode N396 )
DeclarationEdge: (GeneralNode N396 ) - (int V_603) -> (GeneralNode N397 )
DeclarationEdge: (GeneralNode N397 ) - (struct struct.Memory{

} struct.Memory* V_604) -> (GeneralNode N398 )
DeclarationEdge: (GeneralNode N398 ) - (int V_605 = V_483) -> (GeneralNode N399 )
DeclarationEdge: (GeneralNode N399 ) - (int V_606 = V_605+-20) -> (GeneralNode N400 )
DeclarationEdge: (GeneralNode N400 ) - (int V_607 = V_603+4) -> (GeneralNode N401 )
DeclarationEdge: (GeneralNode N401 ) - (int* V_608 = (int*)V_606) -> (GeneralNode N402 )
DeclarationEdge: (GeneralNode N402 ) - (int V_609 = V_608) -> (GeneralNode N403 )
DeclarationEdge: (GeneralNode N403 ) - (int V_610 = V_609+-1) -> (GeneralNode N404 )
DeclarationEdge: (GeneralNode N404 ) - (int* V_611 = (int*)V_606) -> (GeneralNode N405 )
StatementEdge: (GeneralNode N405 ) - (V_611 = V_610) -> (GeneralNode N406 )
BlankEdge: (GeneralNode N395 ) -> (FunctionExitNode N30 )
FunctionReturnEdge: (FunctionExitNode N30 ) - (FunctionSummaryEdge: (GeneralNode N187 ) - ("sub_400509_C2"(): ) -> (GeneralNode N200 )) -> (GeneralNode N200 )
FunctionSummaryEdge: (GeneralNode N187 ) - ("sub_400509_C2"(): ) -> (GeneralNode N200 )
BlankEdge: (GeneralNode N200 ) -> (GeneralNode N188 )
StatementEdge: (GeneralNode N188 ) - (V_407 = 0) -> (GeneralNode N189 )
DeclarationEdge: (GeneralNode N189 ) - (int V_430 = V_412) -> (GeneralNode N190 )
DeclarationEdge: (GeneralNode N190 ) - (int* V_431 = (int*)V_430) -> (GeneralNode N191 )
DeclarationEdge: (GeneralNode N191 ) - (int V_432 = V_431) -> (GeneralNode N192 )
StatementEdge: (GeneralNode N192 ) - (V_412 = V_432) -> (GeneralNode N193 )
DeclarationEdge: (GeneralNode N193 ) - (int V_433 = V_430+8) -> (GeneralNode N194 )
DeclarationEdge: (GeneralNode N194 ) - (int* V_434 = (int*)V_433) -> (GeneralNode N195 )
DeclarationEdge: (GeneralNode N195 ) - (int V_435 = V_434) -> (GeneralNode N196 )
StatementEdge: (GeneralNode N196 ) - (V_406 = V_435) -> (GeneralNode N197 )
DeclarationEdge: (GeneralNode N197 ) - (int V_436 = V_430+16) -> (GeneralNode N198 )
StatementEdge: (GeneralNode N198 ) - (V_411 = V_436) -> (GeneralNode N199 )
ReturnStatementEdge: (GeneralNode N199 ) - (returnV_437) -> (FunctionExitNode N27 )
BlankEdge: (GeneralNode N155 ) -> (FunctionExitNode N27 )
AssumeEdge: (GeneralNode N366 ) - (1=V_584) -> (GeneralNode N279 )
BlankEdge: (GeneralNode N279 ) -> (GeneralNode N280 )
DeclarationEdge: (GeneralNode N280 ) - (int V_531 = V_524+-57) -> (GeneralNode N281 )
DeclarationEdge: (GeneralNode N281 ) - (int V_532 = V_524+10) -> (GeneralNode N282 )
DeclarationEdge: (GeneralNode N282 ) - (int V_533 = V_482) -> (GeneralNode N283 )
DeclarationEdge: (GeneralNode N283 ) - (int V_534 = V_533+-8) -> (GeneralNode N284 )
DeclarationEdge: (GeneralNode N284 ) - (int* V_535 = (int*)V_534) -> (GeneralNode N285 )
StatementEdge: (GeneralNode N285 ) - (V_535 = V_532) -> (GeneralNode N286 )
StatementEdge: (GeneralNode N286 ) - (V_482 = V_534) -> (GeneralNode N287 )
FunctionCallEdge: (GeneralNode N287 ) - ("sub_4004f3_check"(): FunctionSummaryEdge: (GeneralNode N287 ) - ("sub_4004f3_check"(): ) -> (GeneralNode N410 )) -> (FunctionEntryNode N19 )
BlankEdge: (FunctionEntryNode N19 ) -> (GeneralNode N20 )
BlankEdge: (GeneralNode N20 ) -> (GeneralNode N103 )
BlankEdge: (GeneralNode N103 ) -> (GeneralNode N104 )
DeclarationEdge: (GeneralNode N104 ) - (int* V_297 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N105 )
DeclarationEdge: (GeneralNode N105 ) - (struct union.anon{
int i64;
} union.anon* V_298 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N106 )
DeclarationEdge: (GeneralNode N106 ) - (int* V_299 = (int*)V_298) -> (GeneralNode N107 )
DeclarationEdge: (GeneralNode N107 ) - (int* V_300 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N108 )
DeclarationEdge: (GeneralNode N108 ) - (int* V_301 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N109 )
DeclarationEdge: (GeneralNode N109 ) - (int* V_302 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_296+0) -> (GeneralNode N110 )
DeclarationEdge: (GeneralNode N110 ) - (int* V_303) -> (GeneralNode N111 )
DeclarationEdge: (GeneralNode N111 ) - (int V_304 = V_302) -> (GeneralNode N112 )
DeclarationEdge: (GeneralNode N112 ) - (int V_305 = V_301) -> (GeneralNode N113 )
DeclarationEdge: (GeneralNode N113 ) - (int V_306 = V_305+-8) -> (GeneralNode N114 )
DeclarationEdge: (GeneralNode N114 ) - (int* V_307 = (int*)V_306) -> (GeneralNode N115 )
StatementEdge: (GeneralNode N115 ) - (V_307 = V_304) -> (GeneralNode N116 )
DeclarationEdge: (GeneralNode N116 ) - (int V_308 = (int)V_303) -> (GeneralNode N117 )
DeclarationEdge: (GeneralNode N117 ) - (int V_309 = V_299) -> (GeneralNode N118 )
StatementEdge: (GeneralNode N118 ) - (V_303 = V_309) -> (GeneralNode N119 )
DeclarationEdge: (GeneralNode N119 ) - (int V_310 = V_303) -> (GeneralNode N120 )
DeclarationEdge: (GeneralNode N120 ) - (int V_311) -> (GeneralNode N121 )
StatementEdge: (GeneralNode N121 ) - (V_300 = V_311) -> (GeneralNode N122 )
DeclarationEdge: (GeneralNode N122 ) - (int* V_312 = (int*)V_306) -> (GeneralNode N123 )
DeclarationEdge: (GeneralNode N123 ) - (int V_313 = V_312) -> (GeneralNode N124 )
StatementEdge: (GeneralNode N124 ) - (V_302 = V_313) -> (GeneralNode N125 )
DeclarationEdge: (GeneralNode N125 ) - (int* V_314 = (int*)V_305) -> (GeneralNode N126 )
DeclarationEdge: (GeneralNode N126 ) - (int V_315 = V_314) -> (GeneralNode N127 )
StatementEdge: (GeneralNode N127 ) - (V_297 = V_315) -> (GeneralNode N128 )
DeclarationEdge: (GeneralNode N128 ) - (int V_316 = V_305+8) -> (GeneralNode N129 )
StatementEdge: (GeneralNode N129 ) - (V_301 = V_316) -> (GeneralNode N130 )
ReturnStatementEdge: (GeneralNode N130 ) - (returnparam_V_317) -> (FunctionExitNode N21 )
BlankEdge: (GeneralNode N103 ) -> (FunctionExitNode N21 )
FunctionReturnEdge: (FunctionExitNode N21 ) - (FunctionSummaryEdge: (GeneralNode N287 ) - ("sub_4004f3_check"(): ) -> (GeneralNode N410 )) -> (GeneralNode N410 )
FunctionSummaryEdge: (GeneralNode N287 ) - ("sub_4004f3_check"(): ) -> (GeneralNode N410 )
BlankEdge: (GeneralNode N410 ) -> (GeneralNode N288 )
DeclarationEdge: (GeneralNode N288 ) - (int V_536 = V_483) -> (GeneralNode N289 )
DeclarationEdge: (GeneralNode N289 ) - (int V_537 = V_536+-8) -> (GeneralNode N290 )
DeclarationEdge: (GeneralNode N290 ) - (int V_538 = V_475) -> (GeneralNode N291 )
DeclarationEdge: (GeneralNode N291 ) - (int V_539 = V_473) -> (GeneralNode N292 )
DeclarationEdge: (GeneralNode N292 ) - (int* V_540 = (int*)V_537) -> (GeneralNode N293 )
StatementEdge: (GeneralNode N293 ) - (V_540 = V_538) -> (GeneralNode N294 )
DeclarationEdge: (GeneralNode N294 ) - (int* V_541 = (int*)V_537) -> (GeneralNode N295 )
DeclarationEdge: (GeneralNode N295 ) - (int V_542 = V_541) -> (GeneralNode N296 )
StatementEdge: (GeneralNode N296 ) - (V_489 = 0) -> (GeneralNode N297 )
DeclarationEdge: (GeneralNode N297 ) - (int V_543 = V_542&255) -> (GeneralNode N298 )
FunctionReturnEdge: (FunctionExitNode N9 ) - (FunctionSummaryEdge: (GeneralNode N298 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N411 )) -> (GeneralNode N411 )
FunctionSummaryEdge: (GeneralNode N298 ) - ("llvm.ctpop.i32"(): ) -> (GeneralNode N411 )
BlankEdge: (GeneralNode N411 ) -> (GeneralNode N299 )
DeclarationEdge: (GeneralNode N299 ) - (int V_544) -> (GeneralNode N300 )
DeclarationEdge: (GeneralNode N300 ) - (int V_545 = V_544&1) -> (GeneralNode N301 )
DeclarationEdge: (GeneralNode N301 ) - (int V_546 = V_545^1) -> (GeneralNode N302 )
StatementEdge: (GeneralNode N302 ) - (V_490 = V_546) -> (GeneralNode N303 )
StatementEdge: (GeneralNode N303 ) - (V_491 = 0) -> (GeneralNode N304 )
DeclarationEdge: (GeneralNode N304 ) - (int V_547 = V_542=0) -> (GeneralNode N305 )
DeclarationEdge: (GeneralNode N305 ) - (int V_548) -> (GeneralNode N306 )
StatementEdge: (GeneralNode N306 ) - (V_492 = V_548) -> (GeneralNode N307 )
DeclarationEdge: (GeneralNode N307 ) - (int V_549 = V_542>>31) -> (GeneralNode N308 )
DeclarationEdge: (GeneralNode N308 ) - (int V_550) -> (GeneralNode N309 )
StatementEdge: (GeneralNode N309 ) - (V_493 = V_550) -> (GeneralNode N310 )
StatementEdge: (GeneralNode N310 ) - (V_494 = 0) -> (GeneralNode N311 )
DeclarationEdge: (GeneralNode N311 ) - (int V_551 = V_550!=0) -> (GeneralNode N312 )
DeclarationEdge: (GeneralNode N312 ) - (int V_552 = V_547|V_551) -> (GeneralNode N313 )
AssumeEdge: (GeneralNode N313 ) - (not 1=V_552) -> (GeneralNode N413 )
DeclarationEdge: (GeneralNode N413 ) - (int V_553 = 44) -> (GeneralNode N314 )
DeclarationEdge: (GeneralNode N314 ) - (int V_503) -> (GeneralNode N315 )
AssumeEdge: (GeneralNode N315 ) - (1=V_552) -> (GeneralNode N237 )
BlankEdge: (GeneralNode N237 ) -> (GeneralNode N238 )
DeclarationEdge: (GeneralNode N238 ) - (int V_504 = V_503+-85) -> (GeneralNode N239 )
DeclarationEdge: (GeneralNode N239 ) - (int V_505 = V_503+10) -> (GeneralNode N240 )
DeclarationEdge: (GeneralNode N240 ) - (int V_506 = V_482) -> (GeneralNode N241 )
DeclarationEdge: (GeneralNode N241 ) - (int V_507 = V_506+-8) -> (GeneralNode N242 )
DeclarationEdge: (GeneralNode N242 ) - (int* V_508 = (int*)V_507) -> (GeneralNode N243 )
StatementEdge: (GeneralNode N243 ) - (V_508 = V_505) -> (GeneralNode N244 )
StatementEdge: (GeneralNode N244 ) - (V_482 = V_507) -> (GeneralNode N245 )
FunctionCallEdge: (GeneralNode N245 ) - ("sub_4004ea_constructReply"(): FunctionSummaryEdge: (GeneralNode N245 ) - ("sub_4004ea_constructReply"(): ) -> (GeneralNode N407 )) -> (FunctionEntryNode N22 )
BlankEdge: (FunctionEntryNode N22 ) -> (GeneralNode N23 )
BlankEdge: (GeneralNode N23 ) -> (GeneralNode N131 )
BlankEdge: (GeneralNode N131 ) -> (GeneralNode N132 )
DeclarationEdge: (GeneralNode N132 ) - (int* V_353 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_352+0) -> (GeneralNode N133 )
DeclarationEdge: (GeneralNode N133 ) - (int* V_354 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_352+0) -> (GeneralNode N134 )
DeclarationEdge: (GeneralNode N134 ) - (int* V_355 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_352+0) -> (GeneralNode N135 )
DeclarationEdge: (GeneralNode N135 ) - (int* V_356 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_352+0) -> (GeneralNode N136 )
DeclarationEdge: (GeneralNode N136 ) - (int* V_357) -> (GeneralNode N137 )
DeclarationEdge: (GeneralNode N137 ) - (int V_358 = V_356) -> (GeneralNode N138 )
DeclarationEdge: (GeneralNode N138 ) - (int V_359 = V_355) -> (GeneralNode N139 )
DeclarationEdge: (GeneralNode N139 ) - (int V_360 = V_359+-8) -> (GeneralNode N140 )
DeclarationEdge: (GeneralNode N140 ) - (int* V_361 = (int*)V_360) -> (GeneralNode N141 )
StatementEdge: (GeneralNode N141 ) - (V_361 = V_358) -> (GeneralNode N142 )
DeclarationEdge: (GeneralNode N142 ) - (int V_362 = (int)V_357) -> (GeneralNode N143 )
DeclarationEdge: (GeneralNode N143 ) - (int V_363 = V_357) -> (GeneralNode N144 )
DeclarationEdge: (GeneralNode N144 ) - (int V_364) -> (GeneralNode N145 )
StatementEdge: (GeneralNode N145 ) - (V_354 = V_364) -> (GeneralNode N146 )
DeclarationEdge: (GeneralNode N146 ) - (int* V_365 = (int*)V_360) -> (GeneralNode N147 )
DeclarationEdge: (GeneralNode N147 ) - (int V_366 = V_365) -> (GeneralNode N148 )
StatementEdge: (GeneralNode N148 ) - (V_356 = V_366) -> (GeneralNode N149 )
DeclarationEdge: (GeneralNode N149 ) - (int* V_367 = (int*)V_359) -> (GeneralNode N150 )
DeclarationEdge: (GeneralNode N150 ) - (int V_368 = V_367) -> (GeneralNode N151 )
StatementEdge: (GeneralNode N151 ) - (V_353 = V_368) -> (GeneralNode N152 )
DeclarationEdge: (GeneralNode N152 ) - (int V_369 = V_359+8) -> (GeneralNode N153 )
StatementEdge: (GeneralNode N153 ) - (V_355 = V_369) -> (GeneralNode N154 )
ReturnStatementEdge: (GeneralNode N154 ) - (returnparam_V_370) -> (FunctionExitNode N24 )
BlankEdge: (GeneralNode N131 ) -> (FunctionExitNode N24 )
FunctionReturnEdge: (FunctionExitNode N24 ) - (FunctionSummaryEdge: (GeneralNode N245 ) - ("sub_4004ea_constructReply"(): ) -> (GeneralNode N407 )) -> (GeneralNode N407 )
FunctionSummaryEdge: (GeneralNode N245 ) - ("sub_4004ea_constructReply"(): ) -> (GeneralNode N407 )
BlankEdge: (GeneralNode N407 ) -> (GeneralNode N246 )
DeclarationEdge: (GeneralNode N246 ) - (int V_509 = V_483) -> (GeneralNode N247 )
DeclarationEdge: (GeneralNode N247 ) - (int V_510 = V_509+-4) -> (GeneralNode N248 )
DeclarationEdge: (GeneralNode N248 ) - (int V_511 = V_475) -> (GeneralNode N249 )
DeclarationEdge: (GeneralNode N249 ) - (int V_512 = V_473) -> (GeneralNode N250 )
DeclarationEdge: (GeneralNode N250 ) - (int* V_513 = (int*)V_510) -> (GeneralNode N251 )
StatementEdge: (GeneralNode N251 ) - (V_513 = V_511) -> (GeneralNode N252 )
DeclarationEdge: (GeneralNode N252 ) - (int* V_514 = (int*)V_510) -> (GeneralNode N253 )
DeclarationEdge: (GeneralNode N253 ) - (int V_515 = V_514) -> (GeneralNode N254 )
DeclarationEdge: (GeneralNode N254 ) - (int V_516) -> (GeneralNode N255 )
StatementEdge: (GeneralNode N255 ) - (V_480 = V_516) -> (GeneralNode N256 )
StatementEdge: (GeneralNode N256 ) - (V_481 = V_516) -> (GeneralNode N257 )
DeclarationEdge: (GeneralNode N257 ) - (int V_517 = V_512+-105) -> (GeneralNode N258 )
DeclarationEdge: (GeneralNode N258 ) - (int V_518 = V_512+13) -> (GeneralNode N259 )
DeclarationEdge: (GeneralNode N259 ) - (int V_519 = V_482) -> (GeneralNode N260 )
DeclarationEdge: (GeneralNode N260 ) - (int V_520 = V_519+-8) -> (GeneralNode N261 )
DeclarationEdge: (GeneralNode N261 ) - (int* V_521 = (int*)V_520) -> (GeneralNode N262 )
StatementEdge: (GeneralNode N262 ) - (V_521 = V_518) -> (GeneralNode N263 )
StatementEdge: (GeneralNode N263 ) - (V_482 = V_520) -> (GeneralNode N264 )
FunctionCallEdge: (GeneralNode N264 ) - ("sub_4004e0_send"(): FunctionSummaryEdge: (GeneralNode N264 ) - ("sub_4004e0_send"(): ) -> (GeneralNode N408 )) -> (FunctionEntryNode N13 )
BlankEdge: (FunctionEntryNode N13 ) -> (GeneralNode N14 )
BlankEdge: (GeneralNode N14 ) -> (GeneralNode N55 )
BlankEdge: (GeneralNode N55 ) -> (GeneralNode N56 )
DeclarationEdge: (GeneralNode N56 ) - (int* V_191 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_190+0) -> (GeneralNode N57 )
DeclarationEdge: (GeneralNode N57 ) - (struct union.anon{
int i64;
} union.anon* V_192 = %union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_190+0) -> (GeneralNode N58 )
DeclarationEdge: (GeneralNode N58 ) - (int* V_193 = (int*)V_192) -> (GeneralNode N59 )
DeclarationEdge: (GeneralNode N59 ) - (int* V_194 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_190+0) -> (GeneralNode N60 )
DeclarationEdge: (GeneralNode N60 ) - (int* V_195 = i64.%union.anon = type { i64 }.%struct.Reg = type { %union.anon }.%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }.param_V_190+0) -> (GeneralNode N61 )
DeclarationEdge: (GeneralNode N61 ) - (int* V_196) -> (GeneralNode N62 )
DeclarationEdge: (GeneralNode N62 ) - (int V_197 = V_195) -> (GeneralNode N63 )
DeclarationEdge: (GeneralNode N63 ) - (int V_198 = V_194) -> (GeneralNode N64 )
DeclarationEdge: (GeneralNode N64 ) - (int V_199 = V_198+-8) -> (GeneralNode N65 )
DeclarationEdge: (GeneralNode N65 ) - (int* V_200 = (int*)V_199) -> (GeneralNode N66 )
StatementEdge: (GeneralNode N66 ) - (V_200 = V_197) -> (GeneralNode N67 )
DeclarationEdge: (GeneralNode N67 ) - (int V_201 = (int)V_196) -> (GeneralNode N68 )
DeclarationEdge: (GeneralNode N68 ) - (int V_202 = V_193) -> (GeneralNode N69 )
StatementEdge: (GeneralNode N69 ) - (V_196 = V_202) -> (GeneralNode N70 )
DeclarationEdge: (GeneralNode N70 ) - (int* V_203 = (int*)V_199) -> (GeneralNode N71 )
DeclarationEdge: (GeneralNode N71 ) - (int V_204 = V_203) -> (GeneralNode N72 )
StatementEdge: (GeneralNode N72 ) - (V_195 = V_204) -> (GeneralNode N73 )
DeclarationEdge: (GeneralNode N73 ) - (int* V_205 = (int*)V_198) -> (GeneralNode N74 )
DeclarationEdge: (GeneralNode N74 ) - (int V_206 = V_205) -> (GeneralNode N75 )
StatementEdge: (GeneralNode N75 ) - (V_191 = V_206) -> (GeneralNode N76 )
DeclarationEdge: (GeneralNode N76 ) - (int V_207 = V_198+8) -> (GeneralNode N77 )
StatementEdge: (GeneralNode N77 ) - (V_194 = V_207) -> (GeneralNode N78 )
ReturnStatementEdge: (GeneralNode N78 ) - (returnparam_V_208) -> (FunctionExitNode N15 )
BlankEdge: (GeneralNode N55 ) -> (FunctionExitNode N15 )
FunctionReturnEdge: (FunctionExitNode N15 ) - (FunctionSummaryEdge: (GeneralNode N264 ) - ("sub_4004e0_send"(): ) -> (GeneralNode N408 )) -> (GeneralNode N408 )
FunctionSummaryEdge: (GeneralNode N264 ) - ("sub_4004e0_send"(): ) -> (GeneralNode N408 )
BlankEdge: (GeneralNode N408 ) -> (GeneralNode N265 )
DeclarationEdge: (GeneralNode N265 ) - (int V_522 = V_473) -> (GeneralNode N266 )
DeclarationEdge: (GeneralNode N266 ) - (int V_523 = V_522+12) -> (GeneralNode N267 )
AssumeEdge: (GeneralNode N313 ) - (1=V_552) -> (GeneralNode N412 )
AssumeEdge: (GeneralNode N361 ) - (1=V_584) -> (GeneralNode N416 )
AssumeEdge: (GeneralNode N394 ) - (1=V_601) -> (GeneralNode N316 )
BlankEdge: (GeneralNode N316 ) -> (GeneralNode N317 )
DeclarationEdge: (GeneralNode N317 ) - (int* V_555 = (int*)V_554) -> (GeneralNode N318 )
DeclarationEdge: (GeneralNode N318 ) - (int V_556 = V_555) -> (GeneralNode N319 )
StatementEdge: (GeneralNode N319 ) - (V_483 = V_556) -> (GeneralNode N320 )
DeclarationEdge: (GeneralNode N320 ) - (int V_557 = V_554+8) -> (GeneralNode N321 )
DeclarationEdge: (GeneralNode N321 ) - (int* V_558 = (int*)V_557) -> (GeneralNode N322 )
DeclarationEdge: (GeneralNode N322 ) - (int V_559 = V_558) -> (GeneralNode N323 )
StatementEdge: (GeneralNode N323 ) - (V_473 = V_559) -> (GeneralNode N324 )
DeclarationEdge: (GeneralNode N324 ) - (int V_560 = V_554+16) -> (GeneralNode N325 )
StatementEdge: (GeneralNode N325 ) - (V_482 = V_560) -> (GeneralNode N326 )
AssumeEdge: (GeneralNode N392 ) - (1=V_601) -> (GeneralNode N419 )
-------Transfered to cfa (printed dot :)------
Connecting to Cpachecker Thrift Server ...
-------got cpa client :)------
